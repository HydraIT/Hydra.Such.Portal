
@{
    ViewData["Title"] = "Pontos Situação de Requisições";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="~/lib/vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-text-field.html">
<link rel="import" href="~/lib/vaadin-text-field/vaadin-text-field.html">
<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-date-picker.html" />
<link rel="import" href="~/lib/vaadin-date-picker/vaadin-date-picker.html" />

<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />
<link rel="import" href="~/lib/iron-flex-layout/iron-flex-layout.html" />
<link rel="import" href="~/lib/iron-flex-layout/iron-flex-layout-classes.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />

<link rel="import" href="/lib/such-textarea/such-textarea.html">
<link rel="import" href="/lib/paper-dialog/paper-dialog.html" />
<link rel="import" href="/lib/paper-dialog-behavior/paper-dialog-behavior.html" />
<link rel="import" href="/lib\datetime-picker-master/time-element.html" />

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-stateofplaydetails></x-stateofplaydetails>

<dom-module id="x-stateofplaydetails">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        <iron-ajax url="/GestaoRequisicoes/GetStatesOfPlay"
                   id="getStatesOfPlay_ajax"
                   last-response="{{_statesOfPlay1}}"
                   auto
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/GestaoRequisicoes/ExportToExcel_PontosSituacaoRequisicoes"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <div class="subMenu">
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        <paper-toast id="ToastError" style="background-color:red" duration="4000" horizontalAlign="right"></paper-toast>
        <paper-toast id="ToastMessage" duration="4000" horizontalAlign="right"></paper-toast>

        <div class="row break_frm">
            <div class="col-md-12 col-md-12 col-lg-12">
                <iron-form id="frmRequisition">
                    <div class="panel panel-default">
                        <vaadin-grid id="grdItems" aria-label="ProfileModelsTabel" items="{{_statesOfPlay1}}" class="grid" active-item="{{activeItem}}">

                            <vaadin-grid-column width="75px" resizable hidden$="{{ _columns.requisitionNo.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="requisitionNo" direction="desc">Nº Requisição</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="requisitionNo" />
                                </template>
                                <template>
                                    {{item.requisitionNo}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="50px" resizable hidden$="{{ _columns.stateOfPlayId.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="stateOfPlayId" direction="desc">Nº Pedido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="stateOfPlayId" />
                                </template>
                                <template>
                                    {{item.stateOfPlayId}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="250px" resizable hidden$="{{ _columns.question.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="question">Pedido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="question" />
                                </template>
                                <template>
                                    {{item.question}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="75px" resizable hidden$="{{ _columns.questionDateText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="questionDateText">Data do Pedido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="questionDateText" />
                                </template>
                                <template>
                                    {{item.questionDateText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="75px" resizable hidden$="{{ _columns.questionTimeText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="questionTimeText">Hora do Pedido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="questionTimeText" />
                                </template>
                                <template>
                                    {{item.questionTimeText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="150px" resizable hidden$="{{ _columns.questionedByText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="questionedByText">Utilizador do Pedido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="questionedByText" />
                                </template>
                                <template>
                                    {{item.questionedByText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="50px" resizable hidden$="{{ _columns.readStringValue.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="readStringValue" direction="desc">Lido</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="readStringValue" />
                                </template>
                                <template>
                                    {{ item.readStringValue }}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="250px" resizable hidden$="{{ _columns.answer.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="answer">Resposta</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="answer" />
                                </template>
                                <template>
                                    {{item.answer}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="75px" resizable hidden$="{{ _columns.answerDateText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="answerDateText">Data da Resposta</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="answerDateText" />
                                </template>
                                <template>
                                    {{item.answerDateText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="75px" resizable hidden$="{{ _columns.answerTimeText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="answerTimeText">Hora da Resposta</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="answerTimeText" />
                                </template>
                                <template>
                                    {{item.answerTimeText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="150px" resizable hidden$="{{ _columns.answeredByText.hidden }}">
                                <template class="header">
                                    <vaadin-grid-sorter path="answeredByText">Utilizador da Resposta</vaadin-grid-sorter>
                                    <vaadin-grid-filter path="answeredByText" />
                                </template>
                                <template>
                                    {{item.answeredByText}}
                                </template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="50px" resizable>
                                <template class="header">
                                </template>
                                <template>
                                    <center>
                                        <paper-button raised class="btnRemove tableBtn" on-tap="_redirectToRequisitionDetails" title="Ver Requisição"><i class="fa fa-eye" aria-hidden="true"></i></paper-button>
                                    </center>
                                </template>
                            </vaadin-grid-column>
                        </vaadin-grid>
                    </div>
                </iron-form>
            </div>
        </div>
    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-stateofplaydetails',
                properties: {
                    _filterActive: {
                        type: Boolean,
                        value: true
                    },
                    activeItem: {
                        observer: '_rowSelected'
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                },
                ready: function () {
                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');
                },

                fixGridToBottom: function () {
                    var grid_el = $(this.$.grdItems);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },
                _rowSelected: function (item) {
                    debugger;
                    this.$.grdItems.selectedItems = item ? [item] : [];
                    if (item != null) {
                        window.location.href = "/GestaoRequisicoes/PontoSituacaoRequisicao/?reqid=" + item.requisitionNo + "&lineid=" + item.stateOfPlayId;
                    }
                },
                _redirectToRequisitionDetails: function (e) {
                    debugger;
                    e.preventDefault();
                    window.location.href = "/GestaoRequisicoes/LinhasRequisicao/" + e.model.item.requisitionNo;
                },

                _exportEXCEL: function () {
                    //debugger;
                    this._statesOfPlay1[0].ColunasEXCEL = this._columns;

                    this.$.ajax_Export.body = JSON.stringify(this._statesOfPlay1);
                    this.$.ajax_Export.generateRequest();
                },

                _exportEXCELResponse: function (e) {
                    //debugger
                    var FileName = this.export;
                    location.href = '../GestaoRequisicoes/ExportToExcelDownload_PontosSituacaoRequisicoes?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "requisitionNo": { hidden: false, label: "Nº Requisição" },
                        "stateOfPlayId": { hidden: false, label: "Nº Pedido" },
                        "question": { hidden: false, label: "Pedido" },
                        "questionDateText": { hidden: false, label: "Data do Pedido" },
                        "questionTimeText": { hidden: false, label: "Hora do Pedido" },
                        "questionedByText": { hidden: false, label: "Utilizador do Pedido" },
                        "readStringValue": { hidden: false, label: "Lido" },
                        "answer": { hidden: false, label: "Resposta" },
                        "answerDateText": { hidden: false, label: "Data da Resposta" },
                        "answerTimeText": { hidden: false, label: "Hora da Resposta" },
                        "answeredByText": { hidden: false, label: "Utilizador da Resposta" }
                    };

                    if (sessionStorage["stateofplaydetails.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(sessionStorage["stateofplaydetails.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },
                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        sessionStorage["stateofplaydetails.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },
                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },
                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
                /* end - ColumnToggle */

            });
        });
    </script>
</dom-module>
