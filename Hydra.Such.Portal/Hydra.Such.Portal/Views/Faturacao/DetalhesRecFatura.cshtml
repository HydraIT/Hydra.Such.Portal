@{
    ViewData["Title"] = "Receção de Faturas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="import" href="/lib/paper-tabs-master/paper-tab.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-pages-master/iron-pages.html" />
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/iron-form/iron-form.html" />
<link rel="import" href="/lib/paper-button/paper-button.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-date-picker.html">
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="/lib/vaadin-text-field/vaadin-text-field.html">
<link rel="import" href="/lib/vaadin-date-picker/vaadin-date-picker.html">
<link rel="import" href="/lib/paper-dialog/paper-dialog.html" />
<link rel="import" href="/lib/paper-dialog-behavior/paper-dialog-behavior.html" />
<link rel="import" href="/lib/vaadin-grid/vaadin-grid.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-filter.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-sorter.html">
<link rel="import" href="/lib/vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box.html" />
<link rel="import" href="/lib/such-selectbox/such-selectbox.html">
<link rel="import" href="/lib/such-textarea/such-textarea.html">

<x-rececaofaturasdetails _rfperfil="@ViewBag.RFPerfil" ></x-rececaofaturasdetails>

<dom-module id="x-rececaofaturasdetails">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />
        <style>
            vaadin-combo-box {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-date-picker {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-text-field {
                margin-top: 0px !important;
                width: 100%;
            }

            paper-button {
                margin-top: 10px;
            }

            .break_clear {
                margin-top: 15px;
                margin-right: 0px !important;
                margin-left: 0px !important;
            }

            .break_frm {
                margin-top: 15px;
            }

            .marginSpace {
                margin: 0px !important;
            }
        </style>

        <iron-ajax auto url="/PopulateDropdowns/GetRegionCode" last-response="{{ Regions }}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetFunctionalAreaCode" last-response="{{ FunctionalAreas }}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetResponsabilityCenterCode" last-response="{{ ResponsabilityCenters }}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetLocations" last-response="{{ Locations }}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetBillingReceptionStates" last-response="{{ States }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetBillingDocumentTypes" last-response="{{ DocumentTypes }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/PopulateDropdowns/GetNAVVendorComboGrid" last-response="{{ Vendors }}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/Faturacao/GetProblems" last-response="{{ TiposProblemas }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/Faturacao/GetReasons" last-response="{{ TiposMotivos }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/Faturacao/GetDestino" last-response="{{ Destinos }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/Faturacao/GetAreas" last-response="{{ Areas }}" method="get" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax auto url="/Faturacao/GetProblems" last-response="{{ ProblemasPorPerfil }}" id="RespostasPerfil_ajax" method="get" handle-as="json" content-type="application/json"></iron-ajax>

        <iron-ajax url="/Faturacao/GetBillingReception/"
                   last-response="{{ data }}"
                   method="get"
                   handle-as="json"
                   id="page_databound_ajax"
                   on-response="_getBillingReceptionResponse"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetOrders"
                   last-response="{{ Orders }}"
                   method="post"
                   handle-as="json"
                   id="orders_databound_ajax"
                   content-type="application/json"></iron-ajax>

        <iron-ajax url="/Faturacao/CreateBillingReception"
                   last-response="{{ createdItem }}"
                   id="page_create_ajax"
                   on-response="_createResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/Faturacao/PostDocument"
                   last-response="{{ updatedItem }}"
                   id="page_billing_ajax"
                   on-response="_billingCPResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/Faturacao/UpdateBillingReception"
                   last-response="{{ updatedItem }}"
                   id="page_update_ajax"
                   on-response="_updateResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/Faturacao/ValidateNumeration"
                   last-response="{{validateResponse}}"
                   method="post"
                   handle-as="json"
                   id="page_validator_ajax"
                   on-response="_responseValidatorProcessor"
                   content-type="application/json"></iron-ajax>

        <iron-ajax url="/Faturacao/SendBillingReception"
                   last-response="{{ updatedItem }}"
                   id="page_send_ajax"
                   on-response="_updateResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/Faturacao/GetUserProfileById"
                   last-response="{{ userProfile }}"
                   id="get_userprofile_ajax"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>
        <iron-ajax url="/Faturacao/DocumentIsDigitized"
                   last-response="{{ updatedItem }}"
                   id="page_documentDigit_ajax"
                   on-response="_updateResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>

        <div class="subMenu">
            <paper-button class="tablinks" on-tap="_goBack" title="Voltar"><i class="fa fa-arrow-left" aria-hidden="true"></i> Voltar</paper-button>

            <template is="dom-if" if="{{ _permissions.create }}">
                <paper-button class="tablinks" on-tap="_redirectToCreateForm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Criar Nova</paper-button>
            </template>
            <template is="dom-if" if="{{ _permissions.update }}">
                <template is="dom-if" if="{{ _isInvoice }}">
                    <paper-button class="tablinks" on-tap="_postInvoiceCF"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Fatura CF</paper-button>
                    <paper-button class="tablinks" on-tap="_postInvoiceCP"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Fatura CP</paper-button>
                </template>
                <template is="dom-if" if="{{ _isCreditMemo }}">
                    <paper-button class="tablinks" on-tap="_postNotaCredito"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Notas de Crédito</paper-button>
                </template>
            </template>
            <paper-button class="tablinks" on-tap="_openDocument"><i class="fa fa-eye" aria-hidden="true"></i>&nbsp;Ver Documento</paper-button>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading" style="font-size:16px">Cabeçalho</div>
            <div class="panel-body">
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-text-field type="text" value="{{ data.id }}" id="txtBillingReceptionId" name="txtBillingReceptionId" label="Nº Receção"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-combo-box items="[[DocumentTypes]]" id="cmbDocumentTypes" item-value-path="id" item-label-path="value" value="{{ data.tipoDocumento }}" label="Tipo de Documento" disabled="{{ !_permissions.update }}"
                                          required error-message="Este campo é obrigatório">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-3">

                    </div>
                    <div class="col-sm-3">
                        <vaadin-date-picker label="Data Receção" id="dpDataRececao" disabled="{{ !_permissions.update }}" value="{{ data.dataRececao }}"></vaadin-date-picker>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <such-selectbox id="sbVendors" value="{{ data.codFornecedor }}" label="Nº Fornecedor"
                                        items="[[ Vendors ]]"
                                        text-path="name"
                                        value-path="no_"
                                        fields='[{"field":"no_", "name":"Nº Fornecedor"}, {"field":"name", "name":"Nome"}, {"field":"vatRegistrationNo", "name":"Nº VAT"}, {"field":"address", "name":"Morada"}, {"field":"postCode", "name":"Código Postal"}]'
                                        disabled="{{ !_permissions.update }}"
                                        on-value-changed="_supplierSelected">
                        </such-selectbox>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field type="text" value="{{data.numDocFornecedor}}" id="txtNumDocFornecedor" disabled="{{ !_permissions.update }}" label="Núm. Doc. Fornecedor"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-date-picker label="Data Doc. Fornecedor" id="dpDataDocFornecedor" disabled="{{ !_permissions.update }}" value="{{ data.dataDocFornecedor }}"></vaadin-date-picker>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field type="text" value="{{data.numAcordoFornecedor}}" id="txtNumAcordoFornecedor" disabled="{{ !_permissions.update }}" label="Núm. Acordo Fornecedor"></vaadin-text-field>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-combo-box label="Região" items="[[Regions]]" id="cmbRegions" item-value-path="id" item-label-path="value" value="{{data.codRegiao}}" disabled="{{ !_permissions.update }}">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-combo-box label="Área Funcional" items="[[FunctionalAreas]]" id="cmbFunctionalAreas" item-value-path="id" item-label-path="value" value="{{data.codAreaFuncional}}" disabled="{{ !_permissions.update }}">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-combo-box label="Centro Responsabilidade" items="[[ResponsabilityCenters]]" id="cmbResponsabilityCenters" item-value-path="id" item-label-path="value" value="{{data.codCentroResponsabilidade}}" disabled="{{ !_permissions.update }}">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-combo-box label="Localização" items="[[Locations]]" id="cmbLocations" item-value-path="id" item-label-path="value" value="{{data.codLocalizacao}}" disabled="{{ !_permissions.update }}">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-text-field label="Local" type="text" value="{{data.local}}" id="txtLocal" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Destinatário" type="text" value="{{data.destinatario}}" id="txtDestinatario" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">

                    </div>
                    <div class="col-sm-3">
                        <vaadin-date-picker label="Data Última Interação" id="dpDataUltimaInteracao " disabled value="{{data.dataUltimaInteracao }}"></vaadin-date-picker>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <such-selectbox id="sbOrders" value="{{ data.numEncomenda }}" label="Nº Encomenda"
                                        items="[[ Orders ]]"
                                        text-path="no"
                                        value-path="no"
                                        fields='[{"field":"no", "name":"Nº Encomenda"},
                                            {"field":"buyFromVendorNo", "name":"Nº Fornecedor"},
                                            {"field":"buyFromVendorName", "name":"Nome Fornecedor"},
                                            {"field":"valorFactura", "name":"Valor"},
                                            {"field":"quantity", "name":"Quantidade"},
                                            {"field":"quantityReceived", "name":"Quantidade Recebida"},
                                            {"field":"amountRcdNotInvoiced", "name":"Quantidade Rec. não Contabilizada"},
                                            {"field":"orderDate", "name":"Data"},
                                            {"field":"dueDate", "name":"Data Expiração"},
                                            {"field":"locationCode", "name":"Local"},
                                            {"field":"regionId", "name":"Região"},
                                            {"field":"functionalAreaId", "name":"Área Funcional"},
                                            {"field":"respCenterId", "name":"Centro Responsabilidade"},
                                            {"field":"vendorOrderNo", "name":"Nº Encomenda Fornecedor"},
                                            {"field":"vendorInvoiceNo", "name":"Nº Fatura Fornecedor"},
                                            {"field":"vendorCrMemoNo", "name":"Nº Nota Crédito Fornecedor"},
                                            {"field":"documentDate", "name":"Data Documento"},
                                            {"field":"dimensionSetID", "name":"Cód. Dimensão"},
                                            {"field":"relatedDocument", "name":"Documento Relacionado"},
                                            {"field":"sourceDocNo", "name":"Nº Doc. Origem"}]'
                                        disabled="{{ !_permissions.update }}"
                                        on-value-changed="_orderSelected">
                        </such-selectbox>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Núm. Encomenda Manual" type="text" value="{{data.numEncomendaManual}}" id="txtNumEncomendaManual" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Valor Encomenda Original" type="text" value="{{data.valorEncomendaOriginal}}" id="txtValorEncomendaOriginal" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Quantidade Encomenda" type="text" value="{{data.quantidadeEncomenda}}" id="txtQuantidadeEncomenda" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-text-field label="Quantidade Recebida" type="text" value="{{data.quantidadeRecebida}}" id="txtQuantidadeRecebida" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Valor Recebido Não Contabilizado" type="text" value="{{data.valorRecebidoNaoContabilizado}}" id="txtValorRecebidoNaoContabilizado" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">
                        <vaadin-text-field label="Valor" type="text" value="{{data.valor}}" id="txtValor" disabled="{{ !_permissions.update }}"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3">

                    </div>
                </div>
                <div class="marginSpace">
                    <template is="dom-if" if="{{ _permissions.create }}">
                        <template is="dom-if" if="{{ _isCreate }}">
                            <paper-button raised id="btnCreate" class="btnSave" on-tap="_create"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar</paper-button>
                        </template>
                    </template>
                    <template is="dom-if" if="{{ _permissions.update }}">
                        <template is="dom-if" if="{{ !_isCreate }}">
                            <paper-button raised id="btn_updateFH1" class="btnSave" on-tap="_update" disabled="{{ !_permissions.update }}"><i class="fa fa-floppy-o" aria-hidden="true"></i>&nbsp; Guardar</paper-button>
                        </template>
                    </template>
                </div>
            </div>

            <div class="panel-heading" style="font-size:16px">Ponto de Situação</div>
            <div class="panel-body">
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-combo-box items="[[States]]" id="cmbEstados" item-value-path="id" item-label-path="value" value="{{ data.estado }}" label="Estado" disabled>
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-3">
                        <template is="dom-if" if="{{ !_checkPending }}">
                            <vaadin-text-field label=" " type="text" value="{{data.id}}" id="txtid" disabled></vaadin-text-field>
                        </template>
                    </div>
                    <div class="col-sm-2">
                        <vaadin-text-field label="Área" type="text" value="{{data.areaPendente2}}" id="txtArea" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-2">
                        <vaadin-text-field type="text" value="{{ data.destinatario }}" id="txtDestProblema" name="txtDestProblema" label="Destinatário" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-2">
                        <vaadin-date-picker value="{{data.dataRececao}}" id="txtData" label="Data" disabled></vaadin-date-picker>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-1">
                        <vaadin-text-field type="text" value="{{data.tipoProblema}}" id="codDescricao" name="codDescricao" label="Descrição" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-9">
                        <vaadin-text-field rows="1" id="txtDescription" name="txtDescription" label=" " value="{{data.descricaoProblema}}" disabled></vaadin-text-field>
                    </div>
                    <div class="col-sm-2">
                        <vaadin-text-field type="text" value="{{data.dataPassaPendente}}" id="txtDatePeding" label="Data passou Pendente" disabled></vaadin-text-field>
                  </div>
                <div class="row break_clear">
                    <div class="col-sm-10">
                        <such-textarea rows="3" value="{{data.descricao}}" id="txtComment" label="Comentário" disabled="{{_isNotes}}"></such-textarea>
                    </div>
                    <div class="col-sm-2">
                        <vaadin-text-field type="text" value="{{data.dataResolucao}}" id="txtDateResolution" name="txtDateResolution" label="Data de Resolução" disabled></vaadin-text-field>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-9">
                        <paper-button raised id="btnNotes" class="btnSave" on-tap="_notes">&nbsp; Nota</paper-button>
                    </div>
                    <div class="col-sm-3">
                        <template is="dom-if" if="{{ _checkPending }}">
                            <paper-button raised id="btnSendPending" class="btnSave" hidden="{{ !_hiddeSendButton}}" on-tap="_sendPending">{{_nameButtonSend}}</paper-button>
                            <paper-button raised id="btnSendAnswer" class="btnSave" hidden="{{_hiddeAnswerButton}}" on-tap="_sendaAnswer">Resposta</paper-button>
                        </template>
                    </div>
                </div>
                <div class="row break_clear">
                </div>
                <vaadin-grid id="grdRequisitionLines" aria-label="ProfileModelsTabel" items="[[data.workflowItems]]" class="grid" active-item="{{_SelectedLine}}">
                    <vaadin-grid-column width="160px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="data">Data</vaadin-grid-sorter>
                            <vaadin-grid-filter path="data"></vaadin-grid-filter>
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">

                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.dataCriacao}}
                            </template>
                        </template>
                    </vaadin-grid-column>

                    <vaadin-grid-column width="160px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="areaWorkflow">Área</vaadin-grid-sorter>
                            <vaadin-grid-filter path="areaWorkflow"></vaadin-grid-filter>
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">

                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.areaWorkflow}}
                            </template>
                        </template>
                    </vaadin-grid-column>
                    <vaadin-grid-column width="160px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="utilizador">Destinatário</vaadin-grid-sorter>
                            <vaadin-grid-filter path="utilizador"></vaadin-grid-filter>
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">
                                <vaadin-text-field value="{{item.destinatario}}" id="txtDestinatarioGrid" name="txtDestinatarioGrid" disabled="{{ !_permissions.update }}"> </vaadin-text-field>
                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.destinatario}}
                            </template>
                        </template>
                    </vaadin-grid-column>
                    <vaadin-grid-column width="200px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="codTipoProblema">Código</vaadin-grid-sorter>
                            <vaadin-grid-filter path="codTipoProblema" />
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">
                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.codTipoProblema}}
                            </template>
                        </template>
                    </vaadin-grid-column>

                    <vaadin-grid-column width="160px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="descricao">Descrição</vaadin-grid-sorter>
                            <vaadin-grid-filter path="descricao"></vaadin-grid-filter>
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">
                                <vaadin-text-field value="{{item.descricao}}" id="txtDescricao" name="txtDescricao" disabled="{{ !_permissions.update }}"> </vaadin-text-field>
                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.descricao}}
                            </template>
                        </template>
                    </vaadin-grid-column>

                    <vaadin-grid-column width="200px" resizable>
                        <template class="header">
                            <vaadin-grid-sorter path="comentario">Comentários</vaadin-grid-sorter>
                            <vaadin-grid-filter path="comentario" />
                        </template>
                        <template>
                            <template is="dom-if" if="{{ item.selected }}">
                                <vaadin-text-field value="{{item.comentario}}" id="txtComentario" name="txtComentario" disabled="{{ !_permissions.update }}"> </vaadin-text-field>
                            </template>
                            <template is="dom-if" if="{{ !item.selected }}">
                                {{item.comentario}}
                            </template>
                        </template>
                    </vaadin-grid-column>
                </vaadin-grid>
                <div class="row break_clear">
                    <div class="col-sm-2">
                        <paper-button raised id="btnNotes" class="btnSave" on-tap="_notes">&nbsp; Nota</paper-button>
                    </div>
                    <div class="col-sm-2">
                        <paper-button raised id="btnNotes" class="btnSave" on-tap="_notes">&nbsp; Nota</paper-button>
                    </div>
                    <div class="col-sm-2">
                        <paper-button raised id="btnNotes" class="btnSave" on-tap="_notes">&nbsp; Nota</paper-button>
                    </div>
                </div>
            </div>

            <paper-dialog id="dialogSendPeding" class="dialgoBox" modal>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-combo-box items="[[TiposDestinatarios]]" id="cmbDestinatarios" item-value-path="id" item-label-path="value" value="{{_destinatario}}" label="Destinatário" on-value-changed="_destinationTypeChanged">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-6">
                        <vaadin-text-field label=" " type="text" value="" id="txtFornecedor" hidden="{{ _isInternalDestination }}" disabled></vaadin-text-field>
                    </div>
                </div>

                <div class="row break_clear">

                    <div class="col-sm-3" hidden="{{ _isInternalDestination }}">
                        <vaadin-combo-box items="[[ TiposMotivos ]]" id="cmbMotivos" item-value-path="id" item-label-path="id" label="Motivo" on-value-changed="_reasonTypeChanged">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.id]]</div>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-6" hidden="{{ _isInternalDestination }}">
                        <vaadin-text-field label=" " type="text" value="" id="txtmotivo"></vaadin-text-field>
                    </div>
                    <div class="row break_clear" hidden="{{ !_isInternalDestination }}">
                        <div class="col-sm-3">
                            <vaadin-combo-box items="[[ TiposProblemas ]]" id="cmbProblemas" item-value-path="id" item-label-path="id" value="{{tipoDestinatario}}" label="Problema" on-value-changed="_problemTypeChanged">
                                <template>
                                    <paper-icon-item>
                                        <paper-item-body two-line>
                                            <div>[[item.id]]</div>
                                            <div>[[item.value]]</div>
                                        </paper-item-body>
                                    </paper-icon-item>
                                </template>
                            </vaadin-combo-box>
                        </div>
                        <div class="col-sm-6">
                            <vaadin-text-field label=" " value="{{_descricaoProblema}}" type="text" id="txtdescricaoProblema"></vaadin-text-field>
                        </div>
                    </div>
                    <div class="row break_clear" hidden="{{ !_isInternalDestination }}">
                        <div class="col-sm-3">
                            <vaadin-combo-box items="[[ Areas ]]" id="txtAreadgl" item-value-path="id" item-label-path="value" label="Área" on-value-changed="_areaChanged">
                                <template>
                                    <paper-icon-item>
                                        <paper-item-body two-line>
                                            <div>[[item.value]]</div>
                                        </paper-item-body>
                                    </paper-icon-item>
                                </template>
                            </vaadin-combo-box>
                        </div>
                        <div class="col-sm-3">
                            <vaadin-text-field label=" " type="text" id="txtdestinatarioArea"></vaadin-text-field>
                            <vaadin-text-field label=" " type="text" id="txtCodDestino" hidden></vaadin-text-field>
                        </div>
                        <div class="col-sm-3">
                            <vaadin-text-field label=" " type="text" id="txtArea2"></vaadin-text-field>
                        </div>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-9">
                        <such-textarea rows="3" id="txtCommentdgl" name="txtCommentdgl" label="Comentário"></such-textarea>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-checkbox id="txtAnexo" on-click="_anexoChanged">Anexo</vaadin-checkbox>
                    </div>
                    <div class="col-sm-3" hidden="{{ !_isAnexarFicheiro }}">
                        <vaadin-text-field label="Nome do Ficheito" type="file" id="txtNomeFicheiro"></vaadin-text-field>
                    </div>

                    <div class="col-sm-3" hidden="{{ !_isAnexarFicheiro }}">
                        <vaadin-text-field label="Descrição" type="text" id="txtDescricaoAnexo"></vaadin-text-field>
                    </div>
                    <div class="col-sm-3" hidden="{{ !_isAnexarFicheiro }}">
                        <paper-button class="btnSave" raised on-tap="_dlgAddAttached">&nbsp; Anexar</paper-button>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="buttons">
                        <paper-button class="btnRemove" dialog-dismiss>&nbsp; Cancel</paper-button>
                        <paper-button class="btnSave" raised on-tap="_dlgSend">&nbsp; Enviar</paper-button>
                    </div>
                </div>
            </paper-dialog>

            <paper-dialog id="dialogSendAnswer" class="dialgoBox" modal>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-combo-box items="[[ ProblemasPorPerfil ]]" id="cmbProblemasPorPerfil" item-value-path="id" item-label-path="id" label="Resposta" on-value-changed="_answerChange">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.id]]</div>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </div>
                    <div class="col-sm-6">
                        <vaadin-text-field label=" " value="{{_descricaoResposta}}" type="text" id="txtdescricaoResposta"></vaadin-text-field>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-9">
                        <such-textarea rows="3" id="txtCommentdglAnswer" name="txtCommentdglAnswer" label="Comentário"></such-textarea>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="col-sm-3">
                        <vaadin-checkbox id="txtAnexoResposta" on-click="_anexoAnswerChanged">Anexo</vaadin-checkbox>
                    </div>
                    <div class="col-sm-3" hidden="{{ !_isAnexarFicheiroResposta }}">
                        <vaadin-text-field label="Nome do Ficheito" type="file" id="txtNomeFicheiroResposta"></vaadin-text-field>
                    </div>

                    <div class="col-sm-3" hidden="{{ !_isAnexarFicheiroResposta }}">
                        <vaadin-text-field label="Descrição" type="text" id="txtDescricaoAnexoResposta"></vaadin-text-field>
                    </div>
                </div>
                <div class="row break_clear">
                    <div class="buttons">
                        <paper-button class="btnRemove" dialog-dismiss>&nbsp; Cancel</paper-button>
                        <paper-button class="btnSave" raised on-tap="_dlgSendAnswer">&nbsp; Enviar</paper-button>
                    </div>
                </div>
            </paper-dialog>
        </div>
        <paper-toast id="ToastMessageSuccess" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastMessageError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>

    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-rececaofaturasdetails',
                properties: {
                    _billingReceptionId: {
                        type: String,
                        value: @Html.Raw(Json.Serialize(ViewBag.Id)),
                    },
                    _permissions: {
                        type: Array,
                        value: @Html.Raw(Json.Serialize(ViewBag.UserPermissions)),
                    },
                    TiposDestinatarios: {
                        type: Array,
                        value: [{ "id": 0, "value" : "Interno" }, { "id" : 1, "value" : "Externo" }],
                    },
                    _descricaoProblema:{
                        type: String,
                        value: "",
                    },
                    _isCreate: {
                        type: Boolean,
                        value: true,
                    },
                    _isAnexarFicheiro: {
                        type: Boolean,
                        value: false,
                    },
                    _isAnexarFicheiroResposta: {
                        type: Boolean,
                        value: false,
                    },
                    _isNotes: {
                        type: Boolean,
                        value: true,
                    },
                   _destinatario: {
                        type: Number,
                        value: 0,
                    },
                    _checkPending: {
                        type: Boolean,
                        value: true,
                    },
                    _isInternalDestination: {
                        type: Boolean,
                        value: true,
                    },
                    data: {
                        type: Array,
                        value: {},
                    },
                    _invoice: {
                        type: Boolean,
                        value: true,
                    },
                    _states: {
                        type: Array,
                        value: @Html.Raw(Json.Serialize(ViewBag.BillingReceptionStates)),
                    },
                    _descricaoWorkFlow: {
                        type: String,
                        value: "",
                    },
                    _nameButtonSend: {
                        type: String,
                        value: "Enviar Pendente",
                    },
                    _isInvoice: {
                        type: Boolean,
                        value: false,
                    },
                    _isCreditMemo: {
                        type: Boolean,
                        value: false,
                    },
                    _showWorkflowData: {
                        type: Boolean,
                        value: false,
                    },
                    _rfperfil: {
                        type: String,
                        value: "",
                    },
                    _hiddeAnswerButton: {
                        type: Boolean,
                        value: true,
                    },
                    _hiddeSendButton: {
                        type: Boolean,
                        value: false,
                    },
                    Anexos: {
                        type: Array,
                        value: null,
                    }
                },
                ready: function () {
                    if (this._billingReceptionId != null && this._billingReceptionId != "") {
                        this._isCreate = false;
                        this.$.page_databound_ajax.url += this._billingReceptionId;
                        this.$.page_databound_ajax.generateRequest();
                    }
                    else {
                        this._loadOrders();
                    }
                },
                _loadOrders: function (supplierId) {
                    if (supplierId != null) {
                        this.$.orders_databound_ajax.body = JSON.stringify(supplierId);
                    }
                    else {
                        this.$.orders_databound_ajax.body = JSON.stringify("");
                    }
                    this.$.orders_databound_ajax.generateRequest();
                },
                _getBillingReceptionResponse: function (e) {
                    if (e.detail.status === 200) {
                        this._loadOrders(this.data.codFornecedor);
                        this._isInvoice = this.data.tipoDocumento == 2;//Fatura
                        this._isCreditMemo = this.data.tipoDocumento == 3;//Nota de Crédito
                        this._showWorkflowData = this.data.estado >= this._states.Rececao;
                        if (this.data.estado==2){
                            this._checkPending = false;
                        }

                        if (this.data.estado == 1) {
                            this._nameButtonSend = "Enviar";
                            if (this.data.AreaPendente == 0) {
                                this._hiddeAnswerButton = true;
                            } else if (this.data.AreaPendente == 1) {
                                if (this._rfperfil == "Aprovisionamento") {
                                    this._hiddeAnswerButton = true;
                                }                               
                            } else {
                                if (this._rfperfil != "Aprovisionamento" && this._rfperfil != "Contabilidade") {

                                    this._hiddeAnswerButton = false;
                                }
                            }
                            //QUESTÂO
                            if (this._rfperfil == "Contabilidade") {

                                this._hiddeSendButton = true;
                            }                        
                           
                        }
                    }
                },
                _supplierSelected: function (e) {
                    this._loadOrders(e.detail.value);
                },
                _redirectToCreateForm: function () {
                    window.location.href = "/Faturacao/DetalhesRecFatura";
                },
                _validateInputForNew: function () {
                    if (this.$.cmbDocumentTypes.validate()) {
                        return true;
                    }
                    this._openToastError("Verifique os dados inseridos.");
                    return false;
                },
                _clFormatDateWorkflow: function (param) {
                    if (param != undefined) {
                        var data = new Date(param);
                        var dataFormatada = ("0" + data.getDate()).substr(-2) + "/"+ ("0" + (data.getMonth() + 1)).substr(-2) + "/" + data.getFullYear();
                        if (dataFormatada != undefined) {
                            return dataFormatada;
                        }
                    }
                    return "";
                },
                _validateInputForAccounting: function () {
                    if (this._validateInputForNew()) {
                        if (this.data.estado != this._states.Rececao && this.data.estado != this._states.Pendente) {
                            var selState = this.States.find(x => x.id == this.data.estado);
                            var stateDescription = selState != null ? selState.value : this.data.estado;
                            this._openToastError("ATENÇÃO! Este documento já se encontra no estado: " + stateDescription);
                            return false;
                        }
                        if (this.data.codFornecedor == "") {
                            this._openToastError("O Fornecedor tem que estar preenchido.");
                            return false;
                        }
                        if (this.data.numDocFornecedor == "") {
                            this._openToastError("O Nº Documento do Fornecedor tem que estar preenchido.");
                            return false;
                        }
                        if (this.data.valor == "") {
                            this._openToastError("O valor tem que estar preenchido.");
                            return false;
                        }
                        if (this.data.codRegiao == "") {
                            this._openToastError("Tem que selecionar a Região.");
                            return false;
                        }
                        return true;
                    }
                    this._openToastError("Verifique os dados inseridos.");
                    return false;
                },

                _validateInputForAnswer: function () {
                    if (this.data.estado == null || this.data.estado == "") {
                        this._openToastError("O Estado tem que estar preenchido.");
                        return false;
                    }
                    if (this.data.areaPendenteDescricao == "" || this.data.areaPendenteDescricao == null) {
                        this._openToastError("Área Pendente tem que estar preenchida.");
                        return false;
                    }
                    if (this.$.txtDestProblema.value == "" || this.$.txtDestProblema.value == null) {
                        this._openToastError("Destinatário tem que estar preenchido.");
                        return false;
                    }
                    if (this.$.codDescricao.value == "" || this.$.codDescricao.value == null) {
                        this._openToastError("Cód. Descrição tem que estar preenchido.");
                        return false;
                    }
                    if (this.$.txtDescription.value == "" || this.$.txtDescription.value == null) {
                        this._openToastError("Descrição tem que estar preenchida.");
                        return false;
                    }
                    return true;
                },
                _create: function () {
                    if (this._validateInputForNew()) {
                        this.$.page_validator_ajax.body = JSON.stringify(this.data);
                        this.$.page_validator_ajax.generateRequest();
                    }
                },
                _createResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.createdItem.eReasonCode == "1") {
                            this._openToast(this.createdItem.eMessage);
                            //this.data = this.createdItem;
                            var id = this.createdItem.id;
                            setTimeout(
                                function () {
                                    window.location.href = "/Faturacao/DetalhesRecFatura/" + id;
                                }, 1000);
                        }
                        else {
                            this._openToastError(this.createdItem.eMessage);
                        }
                    }
                    else {
                        this._openToastError("O servidor não conseguiu processar o pedido.");
                    }
                },
                _update: function () {
                    this.$.page_update_ajax.body = JSON.stringify(this.data);
                    this.$.page_update_ajax.generateRequest();
                },
                _billingCPResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.updatedItem.eReasonCode == "1") {
                            this._openToast(this.updatedItem.eMessage);
                            this.data = this.updatedItem;
                        }
                        else {
                            this._openToastError(this.updatedItem.eMessage);
                        }
                    }
                    else {
                        this._openToastError("O servidor não conseguiu processar o pedido.");
                    }
                },
                _updateResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.updatedItem.eReasonCode == "1") {
                            this._openToast(this.updatedItem.eMessage);
                            this.data = this.updatedItem;
                           
                            this.$.cmbProblemas.value = "";
                            this.$.txtdescricaoProblema.value = "";
                            this.$.txtdestinatarioArea.value = "";
                            this.$.txtCommentdgl.value = "";
                            this.$.txtArea2.value = "";
                            this.$.txtAreadgl.value="";
                            this.$.txtCodDestino.value = "";    
                            this.$.cmbMotivos.value = "";
                            this.$.txtmotivo.value = "";
                            this.$.txtCommentdgl.value = "";
                           
                        }
                        else {
                            this._openToastError(this.updatedItem.eMessage);
                        }
                    }
                    else {
                        this._openToastError("O servidor não conseguiu processar o pedido.");
                    }
                    this.$.dialogSendPeding.close();
                },

                _responseValidatorProcessor: function (data) {
                    var self = this;
                    if (data.detail.status === 200) {
                        if (this.validateResponse == "") {
                            this.$.page_create_ajax.body = JSON.stringify(this.data);
                            this.$.page_create_ajax.generateRequest();
                        } else {
                            this._openToastError("Ocorreu um erro desconhecido.");
                        }
                    }
                },

                _openToast: function (message) {
                    this.$.ToastMessageSuccess.text = message;
                    this.$.ToastMessageSuccess.open();
                },
                _openToastError: function (message) {
                    this.$.ToastMessageError.text = message;
                    this.$.ToastMessageError.open();
                },
                _orderSelected: function (e) {
                    var order = this.$.sbOrders.activeItem;
                    if (order != null) {
                        var vendorId = new String(this.$.sbVendors.value).valueOf();
                        var vendorIdFromOrder = new String(order.buyFromVendorNo).valueOf();

                        if (vendorId == "") {
                            this.$.sbVendors.value = order.buyFromVendorNo;
                            this.$.cmbRegions.value = order.regionId;
                            this.$.cmbFunctionalAreas.value = order.functionalAreaId;
                            this.$.cmbResponsabilityCenters.value = order.respCenterId;
                            //this.$.txtLocal.value = order.locationCode;
                        }
                        //else if (this.$.sbVendors.value != order.buyFromVendorNo) {
                        else if (vendorId != "" && vendorId != "undefined" &&
                                vendorIdFromOrder != "" && vendorIdFromOrder != "undefined" &&
                                vendorId != vendorIdFromOrder)
                        {
                            this._openToastError("O fornecedor da encomenda tem que coincidir com o da receção.");
                            return;
                        }
                        this.$.txtLocal.value = order.locationCode;
                        //this.$.txtValorEncomendaOriginal.value = order.
                        this.$.txtQuantidadeEncomenda.value = order.quantity;
                        this.$.txtQuantidadeRecebida.value = order.quantityReceived;
                        this.$.txtValorRecebidoNaoContabilizado.value = order.amountRcdNotInvoiced;
                        this.$.txtValor.value = order.valorFactura;
                        if (order.quantity == order.quantityReceived)
                            this._openToast("Encomenda totalmente rececionada.");
                        else
                            this._openToastError("Encomenda por rececionar.");
                    }
                },
                _problemTypeChanged: function (e) {
                    var id = this.$.cmbProblemas.value;
                    if (id != undefined && id!="") {
                        var problem = this.TiposProblemas.find(x => x.id == id);
                        this._descricaoProblema = problem.value;
                    }
                    this._areaChanged();
                },
                _reasonTypeChanged: function (e) {
                    var id = this.$.cmbMotivos.value;
                    if (id != undefined && id != "") {
                        var motivos = this.TiposMotivos.find(x => x.id == id);
                        this.$.txtmotivo.value = motivos.value;
                    }
                },

                _answerChange: function () {
                    var id = this.$.cmbProblemasPorPerfil.value;
                    if (id != undefined && id != "") {
                        var resposta = this.ProblemasPorPerfil.find(x => x.id == id);
                        this.$.txtdescricaoResposta.value = resposta.value;
                    }
                },


                _areaChanged: function (e) {
                    var idArea = this.$.txtAreadgl.value;
                    var idProblema = this.$.cmbProblemas.value;
                    var destino = null;
                    if (idArea != undefined && idArea != "" && idProblema != undefined && idProblema != "") {
                        var problem = this.TiposProblemas.find(x => x.id == idProblema);
                        //Caso Envio Areas Null
                        //Por defeito Aprovisionamento(U03)
                        idArea = idArea.replace('1A-', '');
                        if (problem.extra == null || problem.extra == "") {
                            var codDestino = "U03-" + idArea;
                            destino = this.Destinos.find(x => x.id == codDestino);
                            this.$.txtArea2.value = "Aprovisionamento";
                            this.$.txtdestinatarioArea.value = destino.extra;
                        }
                        else {
                            // Caso Envio Area contem 1 EX (-50-)
                          
                            if (problem.extra.length <= 4) {
                                problem.extra = problem.extra.replace('-', '');
                                problem.extra = problem.extra.replace('-', '');
                                var codDestino = "U" + problem.extra;
                                destino = this.Destinos.find(x => x.id == codDestino);
                                this.$.txtArea2.value = destino.value;
                                this.$.txtdestinatarioArea.value = destino.extra;
                            }
                            // Caso Envio Area contem varios EX (-10=PDIAS-20=MFRANCO-)
                            else {
                                var fields = problem.extra.split('-');
                                var codDestino = "U03-" + idArea;
                                for (i = 0; i < fields.length; i++) {
                                    var txts = fields[i].split('=');
                                    if (txts[0] == idArea) {
                                        this.$.txtArea2.value = "Aprovisionamento";
                                        this.$.txtdestinatarioArea.value = txts[1];

                                    }
                                }
                            }
                        }
                    }
                },
                _anexoChanged: function (e) {
                    if (this.$.txtAnexo.checked == true) {                        
                        this._isAnexarFicheiro = false;
                    }
                    else
                        this._isAnexarFicheiro = true;
                },

                _anexoAnswerChanged: function (e) {
                    if (this.$.txtAnexoResposta.checked == true) {
                        this._isAnexarFicheiroResposta = false;
                    }
                    else
                        this._isAnexarFicheiroResposta = true;

                },

                _destinationTypeChanged: function (e) {
                    var type = e.detail.value;
                    if (type == 0) //interno
                        this._isInternalDestination = true;
                    else {//externo
                        this._isInternalDestination = false;
                        var vendor = this.Vendors.find(x => x.no_ = this.data.codFornecedor);
                        this.$.txtFornecedor.value = vendor != null ? this.data.codFornecedor + " - " + vendor.name : this.data.codFornecedor;
                    }
                },
                _sendPending: function () {
                    this.$.dialogSendPeding.open();
                },

                _sendaAnswer: function () {
                    this.$.dialogSendAnswer.open();

                    //this.$.RespostasPerfil_ajax.body = JSON.stringify(this.data);
                    this.$.RespostasPerfil_ajax.generateRequest();
                },


                _postInvoiceCF: function () {
                    if (this._validateInputForAccounting()) {
                        this.data.id = "CF" + this.data.id;
                        this.$.page_billing_ajax.body = JSON.stringify(this.data);
                        this.$.page_billing_ajax.generateRequest();
                    }
                },
                _postInvoiceCP: function () {
                    if (this._validateInputForAccounting()) {
                        this.data.id = "CP" + this.data.id;
                        this.$.page_billing_ajax.body = JSON.stringify(this.data);
                        this.$.page_billing_ajax.generateRequest();
                    }
                },
                _postNotaCredito: function () {
                    if (this._validateInputForAccounting()) {
                        this.data.id = "CC" + this.data.id;
                        this.$.page_billing_ajax.body = JSON.stringify(this.data);
                        this.$.page_billing_ajax.generateRequest();
                    }
                },
                _dlgSendAnswer: function () {
                    debugger;
                    if (this._validateInputForAnswer()) {
                        var answerDestinyProfile;
                        var userToAnswer = this.data.criadoPor;

                        this.$.get_userprofile_ajax.body = JSON.stringify(this.data.criadoPor);
                        this.$.get_userprofile_ajax.generateRequest();

                        var workflow = null;;
                        workflow = {
                            id: idWork.id + 1,
                            idRecFaturacao: this.data.id,
                            codTipoProblema: this.$.cmbProblemas.value,
                            codProblema: "RF1P",
                            descricao: this.$.txtdescricaoProblema.value,
                            destinatario: this.$.txtdestinatario.value,
                            comentario: this.$.txtCommentdgl.value,
                            enderecoFornecedor: selVendor.email,
                            area: Area.value,
                            areaWorkflow: this.$.txtArea2.value,
                            codDestino: this.$.txtCodDestino.value,
                        };
                    }

                },
                _dlgAddAttached: function () {
                    var anexoNew = {
                        file: this.$.txtNomeFicheiro.value,
                        description: this.$.txtDescricaoAnexo.value      
                    };
                    if (this.Anexos == null) {
                        this.Anexos = [anexoNew];
                    }
                    else
                        this.Anexos.push(anexoNew);

                    this.$.txtNomeFicheiro.value = "";
                    this.$.txtDescricaoAnexo.value = "";
                 },
                _dlgSend: function () {
                    if (this._validateInputForAccounting()) {
                        //if (this.$.txtDatePeding.value != "") {
                            var txt;
                            if (confirm("O documento não está digitalizado. Confirma que pretende à mesma enviar para Pendente?")) {
                                txt = true;
                            } else {
                                txt = false;
                            }
                       // }
                        if (txt == true) {
                            var workflow = null;;
                            var idWork = this.data.workflowItems[this.data.workflowItems.length - 1];
                            
                            var Area = this.Areas.find(x => x.id == this.$.txtAreadgl.value);
                            var selVendor = this.Vendors.find(x => x.no_ == this.$.sbVendors.value);
                            if (this._isInternalDestination == true) {
                                workflow = {
                                    id: idWork.id + 1,
                                    idRecFaturacao: this.data.id,
                                    codTipoProblema: this.$.cmbProblemas.value,
                                    codProblema: "RF1P",
                                    descricao: this.$.txtdescricaoProblema.value,
                                    destinatario: this.$.txtdestinatarioArea.value,
                                    comentario: this.$.txtCommentdgl.value,
                                    enderecoFornecedor: selVendor.email,
                                    area: Area.value,
                                    areaWorkflow: this.$.txtArea2.value,
                                    codDestino: this.$.txtCodDestino.value,
                                    attached: this.Anexos
                                };
                            }
                            else {
                                workflow = {
                                    id: idWork.id + 1,
                                    idRecFaturacao: this.data.id,
                                    codTipoProblema: this.$.cmbMotivos.value,
                                    codProblema: "RF4P",
                                    descricao: this.$.txtmotivo.value,
                                    comentario: this.$.txtCommentdgl.value,
                                    enderecoFornecedor: selVendor.email,
                                    attached: this.Anexos
                                };
                            }
                            this.Anexos = null;
                            this.data.workflowItems.push(workflow);
                            this.$.page_send_ajax.body = JSON.stringify(this.data);
                            this.$.page_send_ajax.generateRequest();
                        }
                        this.$.dialogSendPeding.close();

                    }
                },
                _openDocument: function (e) {
                    var fields
                    var data;
                    var ano;
                    var mes;
                    if (this.data.dataPassaPendente != null && this.data.dataPassaPendente != "") {
                        data = this.data.dataPassaPendente;
                        fields = data.split('-');
                        mes = fields[1];
                        ano = fields[2];
                    }
                    else
                    {
                        data = new Date();
                        mes = data.getMonth()+1;
                        ano = data.getYear();
                    }
                    // remover para ex 2011 ficar 11
                    ano = ano.substr(1);
                    ano = ano.substr(1)
                    var pdfName = "RF" + this.data.id + ".pdf";
                    var link = "../../FacturasFornecedor/" + ano + mes + "/" + pdfName;
                    window.open(link);
                },
                _goBack: function (e) {
                    window.history.back();
                },
                _notes: function (e) {
                    if (this._isNotes == false)
                        this._isNotes = true;
                    else
                        this._isNotes = false;
                },
            });
        });
    </script>
</dom-module>
