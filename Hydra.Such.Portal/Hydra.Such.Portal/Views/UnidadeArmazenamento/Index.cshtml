
@{
    ViewData["Title"] = "Unidades de Armazenamento";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-grid.html">
<link rel="import" href="/lib/vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="~/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />
<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-input/paper-input.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-text-field.html">
<link rel="import" href="/lib/vaadin-text-field/vaadin-text-field.html">

<link rel="import" href="/lib/vaadin-upload/vaadin-upload-file.html">
<link rel="import" href="/lib/vaadin-upload/vaadin-upload.html">
<link rel="import" href="/lib/vaadin-upload/vaadin-upload-file.html">
<link rel="import" href="/lib/vaadin-upload/vaadin-upload.html">

<!--ACORDEÃO-->
<link rel="import" href="/lib/paper-collapse-item/paper-collapse-group.html">
<link rel="import" href="/lib/paper-collapse-item/paper-collapse-item.html">

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-unitstokkeeping></x-unitstokkeeping>

<dom-module id="x-unitstokkeeping">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        <style>
            input[readonly] {
                border: 2px solid transparent;
            }

            input {
                font: inherit;
            }

            paper-input {
                max-width: 450px !important;
            }

            /*ACORDEÃO*/
            paper-collapse-item {
                --paper-item: {
                    padding: 0 0;
                };
                --paper-collapse-item-header: {
                    padding: 0 15px;
                    color: #333;
                    background-color: #f5f5f5;
                    border-bottom: solid #ddd 1px;
                    border-top-left-radius: 3px;
                    border-top-right-radius: 3px;
                };
            }
        </style>

        <iron-ajax url="/UnidadeArmazenamento/GetUnitStockeeping"
                   last-response="{{result}}"
                   method="post"
                   auto
                   handle-as="json"
                   id="page_databound_ajax"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/UnidadeArmazenamento/ExportToExcel_UnidadesArmazenamento"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax last-response="{{result}}"
                   method="post"
                   handle-as="json"
                   id="ajax_update"
                   on-response="_updateResponse"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/UnidadeArmazenamento/UpdateCreate_UnidadesArmazenamento"
                   last-response="{{result}}"
                   method="post"
                   on-response="_updateCreateResponse"
                   handle-as="json"
                   id="ajax_updateCreate"
                   content-type="application/json">
        </iron-ajax>

        <div class="subMenu">
            <template is="dom-if" if="{{ _permissions.create }}">
                <paper-button class="tablinks" on-tap="_redirectToNewUnitForm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar Novo</paper-button>
            </template>
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        <paper-collapse-group>
            <paper-collapse-item class="panel-heading" header="Importar Unidades Armazenamento" closed>
                <div class="panel-body">
                    <div class="row" id="importarUnidadesArmazenamento">
                        <div class="row">
                            <div class="col-sm-11">
                                <vaadin-upload id="UploadRequest"
                                               method="POST"
                                               headers="{'Accept': 'application/json'}"
                                               accept=".xlsx"
                                               timeout=3000000
                                               max-files="1">
                                    <span slot="drop-label">Coloque aqui o seu ficheiro Excel...</span>
                                </vaadin-upload>
                            </div>
                            <div class="col-sm-1 alignPoga">
                                <paper-button class="btnSave" disabled="{{ !_permissions.create }}" raised on-tap="_uploadEXCEL">Guardar</paper-button>
                            </div>
                        </div>
                    </div>
                </div>
            </paper-collapse-item>
        </paper-collapse-group>

        <vaadin-grid id="gridUnitStockeeping" aria-label="gridUnitStockeeping" items="[[result]]" class="grid" multi-sort="true" active-item="{{activeItem}}">
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.productNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="productNo">Nº de Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="productNo" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.productNo}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="160px" hidden$="{{ _columns.description.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="description">Descrição</vaadin-grid-sorter>
                    <vaadin-grid-filter path="description" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.description}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="160px" hidden$="{{ _columns.code.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="code">Cód. Localização</vaadin-grid-sorter>
                    <vaadin-grid-filter path="code" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.code}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="160px" hidden$="{{ _columns.inventory.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="inventory">Inventário</vaadin-grid-sorter>
                    <vaadin-grid-filter path="inventory" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.inventory}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.shelfNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="shelfNo">Nº Prateleiras</vaadin-grid-sorter>
                    <vaadin-grid-filter path="shelfNo" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.shelfNo}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.blocked.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="blocked">Bloqueado</vaadin-grid-sorter>
                    <vaadin-grid-filter path="blocked" />
                </template>
                <template>
                    <div class="alignCenter">
                        <vaadin-checkbox id="ddblocked" name="ddblocked" checked="{{item.blocked}}" disabled></vaadin-checkbox>
                    </div>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.codeWareHouse.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="codeWareHouse">Armazém Principal</vaadin-grid-sorter>
                    <vaadin-grid-filter path="codeWareHouse" />
                </template>
                <template>
                    <div class="alignCenter">
                        <vaadin-checkbox id="ddblocked" name="ddcodeWareHouse" checked="{{item.codeWareHouse}}" disabled></vaadin-checkbox>
                    </div>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.wareHouseValue.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="wareHouseValue">Valor em Armazem</vaadin-grid-sorter>
                    <vaadin-grid-filter path="wareHouseValue" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.wareHouseValue}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.vendorNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="vendorNo">Nº Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="vendorNo" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.vendorNo}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.vendorItemNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="vendorItemNo">Cód. Produto Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="vendorItemNo" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.vendorItemNo}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.codeUnitMeasure.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="codeUnitMeasure">Cód. Unidade Medida Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="codeUnitMeasure" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.codeUnitMeasure}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.unitCost.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="unitCost">Custo Unitário</vaadin-grid-sorter>
                    <vaadin-grid-filter path="unitCost" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.unitCost}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.lastCostDirect.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="lastCostDirect">Último Custo Directo</vaadin-grid-sorter>
                    <vaadin-grid-filter path="lastCostDirect" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.lastCostDirect}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.priceSale.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="priceSale">Preço de Venda</vaadin-grid-sorter>
                    <vaadin-grid-filter path="priceSale" />
                </template>
                <template>
                    <vaadin-text-field value="{{item.priceSale}}" disabled></vaadin-text-field>
                </template>
            </vaadin-grid-column>
        </vaadin-grid>

        <paper-toast id="ToastMessage" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>
    </template>

    <script>
        window.addEventListener('WebComponentsReady', function () {
            var upload = document.querySelector('vaadin-upload#UploadRequest');

            upload.addEventListener('upload-response', function (event) {
                console.log('upload xhr after server response: ', event.detail.xhr);
                event.detail.file.error = 'Custom server error message.';
                this.openToastError(event.detail.file.name + ' erro: ' + event.detail.error);
            });

            upload.addEventListener('file-reject', function (event) {
                this.openToastError(event.detail.file.name + ' erro: ' + event.detail.error);
            });
        });

        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-unitstokkeeping',
                properties: {
                    activeItem: {
                        observer: '_rowSelected'
                    },
                    _permissions: {
                        type: Array,
                        value: @Html.Raw(Json.Serialize(ViewBag.UPermissions)),
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                },

                ready: function () {
                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');
                },

                fixGridToBottom: function () {
                    var grid_el = $(this.$.gridUnitStockeeping);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },

                _rowSelected: function (item) {
                    if (item != null) {
                        window.location.href = "/UnidadeArmazenamento/Detalhes/" + item.productNo;
                    }
                },

                openToast: function (message) {
                    this.$.ToastMessage.text = message;
                    this.$.ToastMessage.open();
                },

                openToastError: function (message) {
                    this.$.ToastError.text = message;
                    this.$.ToastError.open();
                },

                _redirectToNewUnitForm: function (item) {
                    if (item != null) {
                        window.location.href = "/UnidadeArmazenamento/Detalhes";
                    }
                },

                _uploadEXCEL: function () {
                    debugger;
                    var urlFile = "/UnidadeArmazenamento/OnPostImport_UnidadesArmazenamento";
                    var toastSuccess = this.$.ToastMessage;
                    var toastError = this.$.ToastError;
                    var data = new FormData();
                    var uploadFile = this.$.UploadRequest.files;
                    var ajaxImport = this.$.ajax_updateCreate;
                    var ajaxGetALL = this.$.page_databound_ajax;
                    var vaadinGrid = this.$.gridUnitStockeeping;
                    for (var i = 0; i < uploadFile.length; i++) {
                        data.append(uploadFile[i].name, uploadFile[i]);
                    }
                    $.ajax({
                        type: "POST",
                        url: urlFile,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (ListToCreate) {
                            debugger;
                            ajaxImport.body = JSON.stringify(ListToCreate);
                            ajaxImport.generateRequest();
                            toastSuccess.text = "Tabela atualizada com sucesso.";
                            toastSuccess.open();
                            ajaxGetALL.generateRequest();
                            vaadinGrid.clearCache();
                        },
                        error: function () {
                            toastError.text = "Ocorreu um problema ao fazer o upload do(s) Ficheiro(s).";
                            toastError.open();
                        }
                    });
                },

                _exportEXCEL: function () {
                    //debugger;
                    this.result[0].ColunasEXCEL = this._columns;

                    this.$.ajax_Export.body = JSON.stringify(this.result);
                    this.$.ajax_Export.generateRequest();
                },

                _exportEXCELResponse: function (e) {
                    //debugger
                    var FileName = this.export;
                    location.href = '../UnidadeArmazenamento/ExportToExcelDownload_UnidadesArmazenamento?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "productNo": { hidden: false, label: "Nº de Produto" },
                        "description": { hidden: false, label: "Descrição" },
                        "code": { hidden: false, label: "Cód. Localização" },
                        "inventory": { hidden: false, label: "Inventário" },
                        "shelfNo": { hidden: false, label: "Nº Prateleiras" },
                        "blocked": { hidden: false, label: "Bloqueado" },
                        "codeWareHouse": { hidden: false, label: "Armazém Principal" },
                        "wareHouseValue": { hidden: false, label: "Valor em Armazem" },
                        "vendorNo": { hidden: false, label: "Nº Fornecedor" },
                        "vendorItemNo": { hidden: false, label: "Cód. Produto Fornecedor" },
                        "codeUnitMeasure": { hidden: false, label: "Cód. Unidade Medida Produto" },
                        "unitCost": { hidden: false, label: "Custo Unitário" },
                        "lastCostDirect": { hidden: false, label: "Último Custo Directo" },
                        "priceSale": { hidden: false, label: "Preço de Venda" }
                    };

                    if (sessionStorage["unitstokkeeping.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(sessionStorage["unitstokkeeping.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },

                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        sessionStorage["unitstokkeeping.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },

                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },

                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
            /* end - ColumnToggle */

            });
        });
    </script>
</dom-module>

