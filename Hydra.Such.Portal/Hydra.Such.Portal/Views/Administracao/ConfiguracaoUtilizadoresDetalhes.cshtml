
@{
    ViewData["Title"] = "Detalhes Configuração Utilizadores - Administração - Such";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="import" href="~/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="~/lib/vaadin-checkbox/vaadin-checkbox.html">

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-text-field.html">
<link rel="import" href="~/lib/vaadin-text-field/vaadin-text-field.html">

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-combo-box.html" />
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box.html" />
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box-behavior.html" />

<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />

<h1 class="title">Detalhes Configuração Utilizadores</h1>

<x-details-config-users></x-details-config-users>
<dom-module id="x-details-config-users">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        @*POPULATE GRID*@
        <iron-ajax url="/Administracao/GetUserConfigData"
                   last-response="{{data}}"
                   method="post"
                   handle-as="json"
                   id="page_databound_ajax"
                   content-type="application/json"></iron-ajax>


        <h2 class="separator">Geral</h2>
        <div class="row">
            <div class="col-lg-3">
                <vaadin-text-field id="idUser" name="idUser" label="Id Utilizador" value="{{data.idUser}}"></vaadin-text-field>
            </div>
            <div class="col-lg-3">
                <vaadin-text-field id="UserName" name="UserName" label="Nome Utilizador" value="{{data.name}}"></vaadin-text-field>
            </div>
            <div class="col-lg-3 alignPoga">
                <vaadin-checkbox checked="{{data.administrator}}"> Administrador</vaadin-checkbox>

            </div>
            <div class="col-lg-3 alignPoga">
                <vaadin-checkbox checked="{{data.active}}"> Ativo</vaadin-checkbox>
            </div>
        </div>

        @*CREATE NEW PROFILEMODEL*@
        <iron-ajax url="/Administracao/CreateUserConfig" id="ajax_create" last-response="{{data}}" method="post" handle-as="json" on-response="_responseProcessor" content-type="application/json; charset=utf-8"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetAreas" last-response="{{AreasData}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetFeatures" last-response="{{FeaturesData}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetUserProfileModels" last-response="{{UserProfileModelsData}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetDimensions" last-response="{{DimensionData}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetDimensionValues" id="dimensionValue_ajax" last-response="{{DimensionValueData}}" auto method="post" params='{"dimensionId": ""}' handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetDimensionValuesFromLines" id="dimensionValueInGrid_ajax" last-response="{{DimensionValueGridData}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>

        <iron-ajax url="/PopulateDropdowns/GetDimensionValues" id="dimensionValueInGridOPT1_ajax" auto last-response="{{DimensionValuesForRegion}}" method="post" params='{"dimensionId": 1}' handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetDimensionValues" id="dimensionValueInGridOPT2_ajax" auto last-response="{{DimensionValuesForArea}}" method="post" params='{"dimensionId": 2}' handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetDimensionValues" id="dimensionValueInGridOPT3_ajax" auto last-response="{{DimensionValuesForResponsability}}" method="post" params='{"dimensionId": 3}' handle-as="json" content-type="application/json"></iron-ajax>

        <iron-ajax url="/Administracao/DeleteUserDimension" last-response="{{UserDimensionDeleted}}" method="post" handle-as="json" id="page_deleteuserdimension_ajax" on-response="_deleteUserDimensionResponse" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Administracao/CreateUserDimension" last-response="{{UserDimensionCreated}}" method="post" handle-as="json" id="page_createuserdimension_ajax" on-response="_createUserDimensionResponse" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Administracao/DeleteUserAccess" last-response="{{UserAccessDeleted}}" method="post" handle-as="json" id="page_deleteuseraccess_ajax" on-response="_deleteUserAccessResponse" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Administracao/CreateUserAccess" last-response="{{UserAccessCreated}}" method="post" handle-as="json" id="page_createuseraccess_ajax" on-response="_createUserAccessResponse" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Administracao/DeleteUserProfile" last-response="{{UserProfileDeleted}}" method="post" handle-as="json" id="page_deleteuserprofile_ajax" on-response="_deleteUserProfileResponse" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Administracao/CreateUserProfile" last-response="{{UserProfileCreated}}" method="post" handle-as="json" id="page_createuserprofile_ajax" on-response="_createUserProfileResponse" content-type="application/json"></iron-ajax>

        <h2 class="separator">Perfis Utilizadores</h2>
        <div class="row">
            <div class="col-lg-3">
                <vaadin-combo-box items="[[UserProfileModelsData]]" id="_Profiles" item-value-path="id" item-label-path="value" value="{{ddUserProfile}}" label="Àrea">
                    <template>
                        <paper-icon-item>
                            <paper-item-body two-line>
                                <div>[[item.value]]</div>
                            </paper-item-body>
                        </paper-icon-item>
                    </template>
                </vaadin-combo-box>
            </div>
            <div class="col-lg-3 alignPoga">
                <paper-button class="btnEdit" raised on-tap="_createUserProfile">Associar</paper-button>
            </div>
        </div>

        <vaadin-grid id="gridUserProfiles" aria-label="gridUserProfiles" items="{{ data.userProfiles }}" class="grid">
            <vaadin-grid-column width="20%">
                <template class="header">
                    Perfil
                </template>
                <template>
                    <vaadin-combo-box items="[[UserProfileModelsData]]" disabled item-value-path="id" item-label-path="value" value="{{item.id}}">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="80%">
                <template class="header">
                </template>
                <template>
                    <paper-button class="btnRemove" raised on-tap="_deleteUserProfile">Eliminar</paper-button>
                </template>
            </vaadin-grid-column>
        </vaadin-grid>
        <h2 class="separator">Acessos Utilizador</h2>
        <table class="table inlineForm">
            <tr>
                <td width="20$">
                    <vaadin-combo-box items="[[AreasData]]" id="_Areas" item-value-path="id" item-label-path="value" value="{{ddArea}}" label="Àrea">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </td>
                <td width="20%">
                    <vaadin-combo-box items="[[FeaturesData]]" id="_Features" item-value-path="id" item-label-path="value" value="{{ddFeature}}" label="Funcionalidade">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </td>
                <td width="12%"><vaadin-checkbox id="_chkCreate" checked="{{chkCreate}}"> Inserção</vaadin-checkbox></td>
                <td width="12%"><vaadin-checkbox id="_chkRead" checked="{{chkRead}}"> Leitura</vaadin-checkbox></td>
                <td width="12%"><vaadin-checkbox id="_chkUpdate" checked="{{chkUpdate}}"> Modificação</vaadin-checkbox></td>
                <td width="12%"><vaadin-checkbox id="_chkDelete" checked="{{chkDelete}}"> Eliminação</vaadin-checkbox></td>
                <td width="12%"><paper-button class="btnSave" raised on-tap="_createUserAccess">Criar</paper-button></td>
            </tr>
        </table>
        <vaadin-grid id="gridUserAccesses" aria-label="gridUserAccesses" items="{{ data.userAccesses }}" class="grid">
            <vaadin-grid-column width="20%">
                <template class="header">
                    Área
                </template>
                <template>
                    <vaadin-combo-box items="[[AreasData]]" item-value-path="id" item-label-path="value" value="{{item.area}}">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>

                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="20%">
                <template class="header">
                    Funcionalidade
                </template>
                <template>
                    <vaadin-combo-box items="[[FeaturesData]]" item-value-path="id" item-label-path="value" value="{{item.feature}}">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="12%">
                <template class="header">
                    <center>
                        Inserção
                    </center>
                </template>
                <template>
                    <center>
                        <vaadin-checkbox checked="{{item.create}}"></vaadin-checkbox>
                    </center>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="12%">
                <template class="header">
                    <center>
                        Leitura
                    </center>
                </template>
                <template>
                    <center>
                        <vaadin-checkbox checked="{{item.read}}"></vaadin-checkbox>
                    </center>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="12%">
                <template class="header">
                    <center>
                        Modificação
                    </center>
                </template>
                <template>
                    <center>
                        <vaadin-checkbox checked="{{item.update}}"></vaadin-checkbox>
                    </center>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="12%">
                <template class="header">
                    <center>
                        Eliminação
                    </center>
                </template>
                <template>
                    <center>
                        <vaadin-checkbox checked="{{item.delete}}"></vaadin-checkbox>
                    </center>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="12%">
                <template class="header">
                </template>
                <template>
                    <center>
                        <paper-button class="btnRemove" raised on-tap="_deleteUserAccess">Eliminar</paper-button>
                    </center>
                </template>
            </vaadin-grid-column>
        </vaadin-grid>
        <h2 class="separator">Acessos Dimensões</h2>
        <table class="table inlineForm">
            <tr>
                <td width="20%">
                    <vaadin-combo-box items="[[DimensionData]]" id="_Dimension" name="_Dimension" item-value-path="id" item-label-path="value" label="Dimensão" value="{{ddDimension}}" on-value-changed="_onDimensionChanged">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </td>
                <td width="20%">
                    <vaadin-combo-box items="[[DimensionValueData]]" id="_DimensionValue" item-value-path="id" item-label-path="value" label="Valor Dimensão" value="{{ddDimensionValue}}">
                        <template>
                            <paper-icon-item>
                                <paper-item-body two-line>
                                    <div>[[item.value]]</div>
                                </paper-item-body>
                            </paper-icon-item>
                        </template>
                    </vaadin-combo-box>
                </td>
                <td width="60%"><paper-button class="btnSave" raised on-tap="_createUserDimensionAccess">Criar</paper-button></td>
            </tr>
        </table>
        <vaadin-grid id="gridAllowedUserDimensions" aria-label="gridAllowedUserDimensions" items="{{ data.allowedUserDimensions }}" class="grid" active-item="{{_SelectedLine}}">
            <vaadin-grid-column width="20%">
                <template class="header">
                    Dimensão
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-combo-box items="[[DimensionData]]" item-value-path="id" item-label-path="value" value="{{item.dimension}}" on-value-changed="_onDimensionInGridChanged">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        [[ _formatDimension(item.dimension) ]]
                    </template>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="20%">
                <template class="header">
                    Valor Dimensão
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-combo-box items="[[DimensionValueGridData]]" item-value-path="id" item-label-path="value" value="{{item.dimensionValue}}">
                            <template>
                                <paper-icon-item>
                                    <paper-item-body two-line>
                                        <div>[[item.value]]</div>
                                    </paper-item-body>
                                </paper-icon-item>
                            </template>
                        </vaadin-combo-box>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        [[ _formatDimensionValue(item.dimension, item.dimensionValue) ]]
                    </template>
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="60%">
                <template class="header">
                </template>
                <template>
                    <center>
                        <paper-button class="btnRemove" raised on-tap="_onDeleteUserDimensionAccess">Eliminar</paper-button>
                    </center>
                </template>
            </vaadin-grid-column>
        </vaadin-grid>

        <div class="marginSpace">
            @if (ViewBag.UserId == "0")
            {
                <paper-button class="btnSave" raised on-tap="_create">Gravar</paper-button>
            }
            else
            {
                <paper-button class="btnEdit" raised on-tap="_update"><i class="fa fa-floppy-o" aria-hidden="true"></i>&nbsp; Atualizar</paper-button>
                <paper-button class="btnRemove" raised on-tap="_delete"><i class="fa fa-trash" aria-hidden="true"></i>&nbsp; Eliminar</paper-button>
            }
        </div>

        <paper-toast id="ToastMessage" duration="4000" horizontalAlign="right"></paper-toast>

    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-details-config-users',
                properties: {
                    ddUserProfile: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    ddArea: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    ddFeature: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    chkCreate: {
                        type: Boolean,
                        notify: true,
                        value: true
                    },
                    chkRead: {
                        type: Boolean,
                        notify: true,
                        value: true
                    },
                    chkUpdate: {
                        type: Boolean,
                        notify: true,
                        value: true
                    },
                    chkDelete: {
                        type: Boolean,
                        notify: true,
                        value: true
                    },
                    ddDimension: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    ddDimensionValue: {
                        type: Text,
                        notify: true,
                        value: ""
                    },
                    _SelectedLine: {
                        observer: '_lineSelectedHandler'
                    },
                },

                observers: [
                    '_onDimensionsCacheLoaded(DimensionData, DimensionValuesForRegion, DimensionValuesForArea, DimensionValuesForResponsability)'
                ],

                _onDimensionsCacheLoaded: function (optionsForDimension, optionsForRegion, optionsForArea, optionsForResponsability)
                {
                    this.$.page_databound_ajax.body = JSON.stringify({ "IdUser": "@ViewBag.UserId" });
                    this.$.page_databound_ajax.generateRequest();
                },

                ready: function () {
                    
                },
                openToast: function (message) {
                    this.$.ToastMessage.text = message;
                    this.$.ToastMessage.open();
                },
                _formatDimension: function (param) {
                    if (param != undefined) {
                        var sel = this.DimensionData.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";
                },
                _formatDimensionValue: function (dimension, dimensionValue) {
                    if (dimensionValue != undefined) {
                        var sel;
                        switch (dimension) {
                            case 1:
                                sel = this.DimensionValuesForRegion.find(x => x.id == dimensionValue);
                                break;
                            case 2:
                                sel = this.DimensionValuesForArea.find(x => x.id == dimensionValue);
                                break;
                            case 3:
                                sel = this.DimensionValuesForResponsability.find(x => x.id == dimensionValue);
                                break;
                        }
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";
                },
                _lineSelectedHandler: function (item) {
                    if (item != null) {
                        var oSel = this.data.allowedUserDimensions.find(x => x.selected);
                        if (oSel != undefined) {
                            oSel.selected = false;
                        }

                        var sel = this.data.allowedUserDimensions.find(x => x == item);
                        if (sel != undefined) {
                            this.data.allowedUserDimensions.find(x => x == item).selected = true;

                            this.$.dimensionValueInGrid_ajax.body = JSON.stringify(item.dimension);
                            this.$.dimensionValueInGrid_ajax.generateRequest();

                            this.$.gridAllowedUserDimensions.clearCache();
                        }
                    }
                },

                //CRUD Functions
                _validateData() {
                    if (this.data.idUser == '' || this.data.idUser == null) {
                        return "É obrigatório preencher o Id Utilizador";
                    } else if (this.data.name == '' || this.data.name == null) {
                        return "É obrigatório preencher o Nome";
                    }
                    return "";
                },
                _create: function () {
                    var validate = this._validateData();
                    if (validate == "") {
                        this.$.ajax_create.url = "/Administracao/CreateUserConfig";
                        this.$.ajax_create.body = JSON.stringify(this.data);
                        this.$.ajax_create.generateRequest();
                        //this.openToast("Utilizador criado com sucesso!");
                    } else {
                        this.openToast(validate);
                    }
                },
                _update: function () {
                    var validate = this._validateData();
                    if (validate == "") {
                        this.$.ajax_create.url = "/Administracao/UpdateUserConfig";
                        this.$.ajax_create.body = JSON.stringify(this.data);
                        this.$.ajax_create.generateRequest();
                        //this.openToast("Perfil modelo atualizado com sucesso!");
                    } else {
                        this.openToast(validate);
                    }
                },
                _delete: function () {
                    this.$.ajax_create.url = "/Administracao/DeleteUserConfig";
                    this.$.ajax_create.body = JSON.stringify(this.data);
                    this.$.ajax_create.generateRequest();
                },
                _responseProcessor: function (e) {
                    var self = this;
                    if (e.detail.status === 200) {
                        if (e.detail.url.indexOf("Create") !== -1) {
                            window.location.href = "/Administracao/ConfiguracaoUtilizadoresDetalhes/" + this.data.IdUser;
                        }
                        else if (e.detail.url.indexOf("Delete") !== -1) {
                            if (this.data.id == 0) {
                                window.location.href = "/Administracao/PerfisModelo";
                            } else {
                                this.openToast("Ocorreu um erro ao remover o Perfil Modelo.");
                            }
                        }
                        else {
                            this.$.page_databound_ajax.generateRequest();
                            this.openToast("O perfil foi atualizado com sucesso!");
                        }
                    } else {
                        if (e.detail.url.indexOf("Create") !== -1) {
                            this.openToast("Ocorreu um erro ao criar o perfil modelo.");
                        }
                        else if (e.detail.url.indexOf("Delete") !== -1) {
                            this.openToast("Ocorreu um erro ao remover o Perfil Modelo!");
                        }
                        else {
                            this.$.grid_databound.generateRequest();
                            this.openToast("Ocorreu um erro ao atualizar o perfil modelo.");
                        }
                    }
                },

                //User Profiles Functions
                _createUserProfile: function () {
                    if (this.ddUserProfile == "") {
                        this.openToast("É obrigatório escolher o perfil.");
                    } else {
                        this.$.page_createuserprofile_ajax.body = JSON.stringify({ userId: this.data.idUser, id: this.ddUserProfile });
                        this.$.page_createuserprofile_ajax.generateRequest();
                        this.$.gridUserProfiles.clearCache();
                    }

                },
                _deleteUserProfile: function (e) {
                    var index = this.data.userProfiles.indexOf(e.model.item);
                    this.data.userProfiles.splice(index, 1);
                    this.$.page_deleteuserprofile_ajax.body = JSON.stringify({ userId: this.data.idUser, id: e.model.item.id });
                    this.$.page_deleteuserprofile_ajax.generateRequest();
                    this.$.gridUserProfiles.clearCache();
                },
                //User Accesses Functions
                _createUserAccess: function () {
                    if (this.ddArea == "") {
                        this.openToast("É obrigatório preencher a àrea.");
                    } else if (this.ddFeature == null) {
                        this.openToast("É obrigatório preencher a Funcionalidade.");
                    } else {
                        this.$.page_createuseraccess_ajax.body = JSON.stringify({
                            idUser: this.data.idUser, area: this.ddArea, feature: this.ddFeature,
                            read: this.chkRead, create: this.chkCreate, update: this.chkUpdate, delete: this.chkDelete });
                        this.$.page_createuseraccess_ajax.generateRequest();
                        this.$.gridUserAccesses.clearCache();
                    }
                },
                _deleteUserAccess: function (e) {
                    var index = this.data.userAccesses.indexOf(e.model.item);
                    this.data.userAccesses.splice(index, 1);
                    this.$.page_deleteuseraccess_ajax.body = JSON.stringify({ idUser: this.data.idUser, area: e.model.item.area, feature: e.model.item.feature });
                    this.$.page_deleteuseraccess_ajax.generateRequest();
                    this.$.gridUserAccesses.clearCache();

                },
                //User Accesses Functions
                _onDimensionChanged: function (e) {
                    if (e.detail.value != null && e.detail.value != "") {
                        var dimensionId = e.detail.value;
                        this.$.dimensionValue_ajax.params = { "dimensionId": dimensionId };
                        this.$.dimensionValue_ajax.generateRequest();
                    }
                },
                _onDimensionInGridChanged: function (e) {
                    this.$.dimensionValueInGrid_ajax.body = JSON.stringify(e.detail.value);
                    this.$.dimensionValueInGrid_ajax.generateRequest();
                },
                _onDeleteUserDimensionAccess: function (e) {
                    var index = this.data.allowedUserDimensions.indexOf(e.model.item);
                    this.data.allowedUserDimensions.splice(index, 1);
                    this.$.page_deleteuserdimension_ajax.body = JSON.stringify({ userId: this.data.idUser, dimension: e.model.item.dimension, dimensionValue: e.model.item.dimensionValue });
                    this.$.page_deleteuserdimension_ajax.generateRequest();
                    this.$.gridAllowedUserDimensions.clearCache();
                },
                _createUserDimensionAccess: function () {
                    if (this.ddDimension == "") {
                        this.openToast("É obrigatório preencher a dimensão.");
                    } else if (this.ddFeature == null) {
                        this.openToast("É obrigatório preencher o valor dimensão.");
                    } else {
                        this.$.page_createuserdimension_ajax.body = JSON.stringify({ userId: this.data.idUser, dimension: this.ddDimension, dimensionValue: this.ddDimensionValue });
                        this.$.page_createuserdimension_ajax.generateRequest();
                        this.$.gridAllowedUserDimensions.clearCache();
                    }
                },
                _deleteUserDimensionResponse: function (e) {
                    if (this.UserDimensionDeleted) {
                        this.openToast('Eliminado com sucesso');
                    }
                    else {
                        this.openToast('Ocorreu um erro ao eliminar acesso a dimensão.');
                    }
                },
                _createUserDimensionResponse: function (e) {
                    if (this.UserDimensionCreated) {
                        this.openToast('Adicionado com sucesso');
                        this.$.page_databound_ajax.generateRequest();
                        this.$._Dimension.value = ""
                        this.$._DimensionValue.value = "";
                    }
                    else {
                        this.openToast('Ocorreu um erro ao adicionar acesso a dimensão.');
                    }
                },
                _deleteUserAccessResponse: function (e) {
                    if (this.UserAccessDeleted) {
                        this.openToast('Eliminado com sucesso');
                    }
                    else {
                        this.openToast('Ocorreu um erro ao eliminar.');
                    }
                },
                _createUserAccessResponse: function (e) {
                    if (this.UserAccessCreated) {
                        this.openToast('Adicionado com sucesso');
                        this.$.page_databound_ajax.generateRequest();
                        this.$._Areas.value = ""
                        this.$._Features.value = "";
                    }
                    else {
                        this.openToast('Ocorreu um erro ao adicionar.');
                    }
                },
                _deleteUserProfileResponse: function (e) {
                    if (this.UserProfileDeleted) {
                        this.openToast('Eliminado com sucesso');
                    }
                    else {
                        this.openToast('Ocorreu um erro ao eliminar.');
                    }
                },
                _createUserProfileResponse: function (e) {
                    if (this.UserProfileCreated) {
                        this.openToast('Adicionado com sucesso');
                        this.$.page_databound_ajax.generateRequest();
                        this.$.ddUserProfile.value = ""
                    }
                    else {
                        this.openToast('Ocorreu um erro ao adicionar.');
                    }
                },
            });
        });
    </script>

</dom-module>


