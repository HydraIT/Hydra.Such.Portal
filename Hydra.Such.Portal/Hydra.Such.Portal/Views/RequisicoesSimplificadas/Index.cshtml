
@{
    if (ViewBag.Option == "historico")
    {
        ViewData["Title"] = "Histórico Requisições Simplificadas";
    }
    else if (ViewBag.Option == "registar")
    {
        ViewData["Title"] = "Requisições Simplificadas para Registar";
    }
    else
    {
        ViewData["Title"] = "Requisições Simplificadas";
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="import" href="~/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />
<link rel="import" href="~/lib/iron-flex-layout/iron-flex-layout-classes.html" />

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-simplifiedreq></x-simplifiedreq>
<dom-module id="x-simplifiedreq">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        <iron-ajax method="post" handle-as="json" content-type="application/json" last-response="{{SimplifiedRequisitions}}" id="grid_datasource" url="/RequisicoesSimplificadas/SimplifiedRequisitionsPage"></iron-ajax>

        <iron-ajax url="/RequisicoesSimplificadas/ExportToExcel_RequisicoesSimplificadas"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/PopulateDropdowns/GetRequisitionsStatus" last-response="{{GetRequisitionsStatus}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>

        <div class="subMenu">
            <template is="dom-if" if="{{ _permissions.delete }}">
                <paper-button class="btnSave" raised on-tap="_redirectToNewForm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar</paper-button>
            </template>
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        <vaadin-grid id="gridrequisitionsimple" aria-label="gridrequisitionsimple" items="[[SimplifiedRequisitions]]" class="grid" active-item="{{activeItem}}" multi-sort="true">
            <vaadin-grid-column width="100px" resizable hidden$="{{ _columns.requisitionNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="requisitionNo">Nº</vaadin-grid-sorter>
                    <vaadin-grid-filter path="requisitionNo" />
                </template>
                <template>
                    {{item.requisitionNo}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="150px" resizable hidden$="{{ _columns.status.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="status">Estado</vaadin-grid-sorter>
                    <vaadin-grid-filter path="status" />
                </template>
                <template>
                    [[_parseStatus(item.status)]]
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="100px" resizable hidden$="{{ _columns.requisitionDate.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="requisitionDate">Data Requisição</vaadin-grid-sorter>
                    <vaadin-grid-filter path="requisitionDate" />
                </template>
                <template>
                    {{item.requisitionDate}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.requisitionTime.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="requisitionTime">Hora Requisição</vaadin-grid-sorter>
                    <vaadin-grid-filter path="requisitionTime" />
                </template>
                <template>
                    {{item.requisitionTime}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.locationCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="locationCode">Cód. Localização</vaadin-grid-sorter>
                    <vaadin-grid-filter path="locationCode" />
                </template>
                <template>
                    {{item.locationCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.regionCode.hidden }}">>
                <template class="header">
                    <vaadin-grid-sorter path="regionCode">Cód. Região</vaadin-grid-sorter>
                    <vaadin-grid-filter path="regionCode" />
                </template>
                <template>
                    {{item.regionCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.functionalAreaCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="functionalAreaCode">Cód. Area</vaadin-grid-sorter>
                    <vaadin-grid-filter path="functionalAreaCode" />
                </template>
                <template>
                    {{item.functionalAreaCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.responsabilityCenterCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="responsabilityCenterCode">Cód. Centro Responsabilidade</vaadin-grid-sorter>
                    <vaadin-grid-filter path="responsabilityCenterCode" />
                </template>
                <template>
                    {{item.responsabilityCenterCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.projectNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="projectNo">Nº Projeto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="projectNo" />
                </template>
                <template>
                    {{item.projectNo}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="70px" resizable hidden$="{{ _columns.observations.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="observations">Observações</vaadin-grid-sorter>
                    <vaadin-grid-filter path="observations" />
                </template>
                <template>
                    {{item.observations}}
                </template>
            </vaadin-grid-column>
        </vaadin-grid>

    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-simplifiedreq',
                properties: {
                    activeItem: {
                        observer: '_onRowSelected'
                    },
                    _filterActive: {
                        type: Boolean,
                        value: true
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                },

                ready: function () {
                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');

                    var option = "@ViewBag.Option";
                    if (option =="registar") {
                        this.$.ddmarginSpace.style.display = 'none';
                        this.$.grid_datasource.body = JSON.stringify(option);
                    }
                    else if (option == "historico") {
                        this.$.ddmarginSpace.style.display = 'none';
                        this.$.grid_datasource.body = JSON.stringify(option);
                    }
                    this.$.grid_datasource.generateRequest();
                },
                fixGridToBottom: function () {
                    var grid_el = $(this.$.gridrequisitionsimple);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },
                _onRowSelected: function (item) {
                    if (item != null) {
                        window.location.href = "/RequisicoesSimplificadas/Detalhes/" + item.requisitionNo;
                    }
                },
                _redirectToNewForm: function (item) {
                    if (item != null) {
                        window.location.href = "/RequisicoesSimplificadas/Detalhes";
                    }
                },
                _parseStatus: function (param) {
                    if (param != undefined) {

                        var sel = this.GetRequisitionsStatus.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";
                },

                _exportEXCEL: function () {
                    //debugger;
                    this.$.ajax_Export.body = JSON.stringify(this.SimplifiedRequisitions);
                    this.$.ajax_Export.generateRequest();
                },

                _exportEXCELResponse: function (e) {
                    //debugger
                    var FileName = this.export;
                    location.href = '../RequisicoesSimplificadas/ExportToExcelDownload_RequisicoesSimplificadas?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "requisitionNo": { hidden: false, label: "Nº" },
                        "status": { hidden: false, label: "Estado" },
                        "requisitionDate": { hidden: false, label: "Data Requisição" },
                        "requisitionTime": { hidden: false, label: "Hora Requisição" },
                        "locationCode": { hidden: false, label: "Cód. Localização" },
                        "regionCode": { hidden: false, label: "Cód. Região" },
                        "functionalAreaCode": { hidden: false, label: "Cód. Area" },
                        "responsabilityCenterCode": { hidden: false, label: "Cód. Centro Responsabilidade" },
                        "projectNo": { hidden: false, label: "Nº Projeto" },
                        "observations": { hidden: false, label: "Observações" }
                    };

                    if (sessionStorage["simplifiedreq.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(sessionStorage["simplifiedreq.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },
                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        sessionStorage["simplifiedreq.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },
                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },
                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
            /* end - ColumnToggle */

            });
        });
    </script>
</dom-module>

