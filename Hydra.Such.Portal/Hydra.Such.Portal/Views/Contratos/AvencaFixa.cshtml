
@{
    ViewData["Title"] = "Avença Fixa";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
@*<link rel="import" href="/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />*@
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-selection-column.html" />
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-active-item-behavior.html" />
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-selection-behavior.html" />
<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="~/lib/vaadin-checkbox/vaadin-checkbox.html">

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-text-field.html">
<link rel="import" href="~/lib/vaadin-text-field/vaadin-text-field.html">

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-date-picker.html" />
<link rel="import" href="~/lib/vaadin-date-picker/vaadin-date-picker.html" />

<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-combo-box.html" />
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box.html" />
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box-behavior.html" />

<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />
<link rel="import" href="~/lib/iron-flex-layout/iron-flex-layout.html" />
<link rel="import" href="~/lib/iron-flex-layout/iron-flex-layout-classes.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />

<link rel="import" href="~/elements/comboboxs/MovementTypeList.html" />
<link rel="import" href="~/elements/comboboxs/ProjectTypeList.html" />
<link rel="import" href="~/elements/comboboxs/ProjectList.html" />
<link rel="import" href="/lib/paper-dialog/paper-dialog.html" />
<link rel="import" href="/lib/paper-dialog-behavior/paper-dialog-behavior.html" />

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-avencafixa></x-avencafixa>
<dom-module id="x-avencafixa">
    <template>
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="~/css/main.css" />

        <style>
            input[readonly] {
                border: 2px solid transparent;
            }

            input {
                font: inherit;
            }

            .editGrid paper-input {
                max-width: 200px !important;
                font-size: 13px !important;
            }
        </style>
        <iron-ajax url="/PopulateDropdowns/GetContractInvoicePeriods" last-response="{{CBInvoicePeriods}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/Contratos/GetAllAvencaFixa" last-response="{{result}}" id="ajax_getall" method="post" handle-as="json" content-type="application/json" on-response="_gridListResponse"></iron-ajax>
        <iron-ajax url="/Contratos/GetPedingAvencaFixa" last-response="{{result}}" id="ajax_getpeding" method="post" handle-as="json" content-type="application/json" on-response="_gridListPedingResponse"></iron-ajax>
        <iron-ajax url="/Contratos/GenerateInvoice" last-response="{{invoiceGen}}" id="ajax_generate" method="post" handle-as="json" content-type="application/json" on-response="_invoiceGenResponse"></iron-ajax>
        <iron-ajax url="/Contratos/CountInvoice" last-response="{{invoiceCount}}" id="ajax_count" method="post" handle-as="json" content-type="application/json" on-response="_invoiceCountResponse"></iron-ajax>
        <iron-ajax url="/Contratos/ExportToExcel_AvencaFixa"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/PopulateDropdowns/GetRegionCode" last-response="{{CBRegions}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetFunctionalAreaCode" last-response="{{CBFunctionalAreas}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetResponsabilityCenterCode" last-response="{{CBResponsabilityCenterCodes}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>

        <div class="subMenu" disabled="{{_locked}}">
            <paper-button class="tablinks" on-tap="_generateInvoice"><i class="fa fa-clipboard" aria-hidden="true"></i> Gerar Fatura</paper-button>
            <paper-button class="tablinks" on-tap="_count"><i class="fa fa-align-right" aria-hidden="true"></i> Contabilizar</paper-button>
            <paper-button class="tablinks" on-tap="_openPending"><i class="fa fa-times-circle" aria-hidden="true"></i> CAFs Pendentes </paper-button>
            <paper-button class="tablinks" on-tap="_openInvice"><i class="fa fa-check-circle" aria-hidden="true"></i> CAFs Activas </paper-button>
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        @*<h2 class="separator">Autorizar Faturação Contratos</h2>*@
        <vaadin-grid id="avencaFixaTable" selected-items={{selectedItems}} active-item="{{selectedItem}}" aria-label="Tabela Avença Fixa" items="[[result]]" class="editGrid">
            <vaadin-grid-selection-column id="selectColumn" resizable hidden="{{ _NotshowColCheckBox }}">
            </vaadin-grid-selection-column>

            <vaadin-grid-column width="50px" resizable>
                <template class="header">
                </template>
                <template>
                    <center>
                        <paper-button class="btnSave tableBtn" on-tap="_showContract" title="Ver Contracto"><i class="fa fa-info" aria-hidden="true"></i></paper-button>
                    </center>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.contractNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="contractNo">Nº Contrato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="contractNo"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.contractNo}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden="{{checked}}">
                <template class="header">
                    <vaadin-grid-sorter path="situation">Situação</vaadin-grid-sorter>
                    <vaadin-grid-filter path="situation"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.situation}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.description.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="description">Descrição</vaadin-grid-sorter>
                    <vaadin-grid-filter path="description"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.description}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.clientNo.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clientNo">Nº Cliente</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clientNo"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.clientNo}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.clientName.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clientName">Nome Cliente</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clientName"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.clientName}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.invoiceValue.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="invoiceValue">Valor da Fatura</vaadin-grid-sorter>
                    <vaadin-grid-filter path="invoiceValue"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.invoiceValue}}€
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.numberOfInvoices.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="numberOfInvoices">Nº Faturas a Emitir</vaadin-grid-sorter>
                    <vaadin-grid-filter path="numberOfInvoices"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.numberOfInvoices}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.invoiceTotal.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="invoiceTotal">Total a Faturar</vaadin-grid-sorter>
                    <vaadin-grid-filter path="invoiceTotal"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.invoiceTotal}}€
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.contractValue.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="contractValue">Valor do Contrato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="contractValue"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.contractValue}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.valueToInvoice.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="valueToInvoice">Valor por Faturar</vaadin-grid-sorter>
                    <vaadin-grid-filter path="valueToInvoice"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.valueToInvoice}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.billedValue.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="billedValue">Valor Faturado</vaadin-grid-sorter>
                    <vaadin-grid-filter path="billedValue"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.billedValue}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.regionCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="regionCode">Cód. Região</vaadin-grid-sorter>
                    <vaadin-grid-filter path="regionCode"></vaadin-grid-filter>
                </template>
                <template>
                    [[ _parseRegionCode(item.regionCode) ]]
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.functionalAreaCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="functionalAreaCode">Cód. Área Funcional</vaadin-grid-sorter>
                    <vaadin-grid-filter path="functionalAreaCode"></vaadin-grid-filter>
                </template>
                <template>
                    [[ _parseFuncAreaCode(item.functionalAreaCode) ]]
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.responsabilityCenterCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="responsabilityCenterCode">Cód. Centro Responsabilidade</vaadin-grid-sorter>
                    <vaadin-grid-filter path="responsabilityCenterCode"></vaadin-grid-filter>
                </template>
                <template>
                    [[ _parseRepCenterCode(item.responsabilityCenterCode) ]]
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.startDate.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="startDate">Data Inicial</vaadin-grid-sorter>
                    <vaadin-grid-filter path="startDate"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.startDate}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.expiryDate.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="expiryDate">Data Expiração</vaadin-grid-sorter>
                    <vaadin-grid-filter path="expiryDate"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.expiryDate}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.registerDate.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="registerDate">Data Próxima Fatura</vaadin-grid-sorter>
                    <vaadin-grid-filter path="registerDate"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.registerDate}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.invoicePeriod.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="invoicePeriod">Período Fatura</vaadin-grid-sorter>
                    <vaadin-grid-filter path="invoicePeriod"></vaadin-grid-filter>
                </template>
                <template>
                    [[ _parseinvoicePeriod(item.invoicePeriod) ]]
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.invoiceGroupValue.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="invoiceGroupValue">Grupo Fatura</vaadin-grid-sorter>
                    <vaadin-grid-filter path="invoiceGroupValue"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.invoiceGroupValue}}
                </template>
            </vaadin-grid-column>
            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.invoiceGroupCount.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="invoiceGroupCount">Quantidade de Linhas Agrupadas</vaadin-grid-sorter>
                    <vaadin-grid-filter path="invoiceGroupCount"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.invoiceGroupCount}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable hidden$="{{ _columns.document_No.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="document_No">Nº</vaadin-grid-sorter>
                    <vaadin-grid-filter path="document_No"></vaadin-grid-filter>
                </template>
                <template>
                    {{item.document_No}}
                </template>
            </vaadin-grid-column>


        </vaadin-grid>


        <paper-toast id="ToastMessageSuccess" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastMessageError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>
    </template>

    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-avencafixa',
                properties: {
                    _locked: {
                        type: Boolean,
                        value: true
                    },
                    _NotshowColCheckBox: {
                        type: Boolean,
                        value: false
                    },
                    checked: {
                        type: Boolean,
                        value: true
                    },
                    selectedItems: {
                        type: Array,
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                },

                ready: function () {
                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');
                },

                openToastSuccess: function (message) {
                    this.$.ToastMessageSuccess.text = message;
                    this.$.ToastMessageSuccess.open();
                },
                openToastError: function (message) {
                    this.$.ToastMessageError.text = message;
                    this.$.ToastMessageError.open();
                },

                _gridListResponse: function () {
                    this._locked = false;
                    if (this.result == null || this.result == undefined || this.result.length == 0) {
                        this.openToastSuccess("Não existem linhas para faturar.");
                    }
                    else {
                        this.checked = true;
                        this.openToastSuccess("Tabela de faturas atualizada com sucesso.");
                    }
                },

                _generateInvoice: function () {
                    //if (this.result == null || this.result == undefined || this.result.length == 0)
                    //{
                    this.selectedItems = [];
                    this._locked = true;
                    this.$.ajax_generate.body = JSON.stringify(this.result);
                    this.$.ajax_generate.generateRequest();
                    //}
                    //else {
                    //    this.openToastError("Não existem linhas disponiíveis para faturar.");
                    //}
                },

                fixGridToBottom: function () {
                    var grid_el = $(this.$.avencaFixaTable);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },

                _showContract: function (e) {
                    debugger;
                    if (e != null) {
                        var index = this.result.indexOf(e.model.item);
                        var contractNo = e.model.item.contractNo;
                        //var version = e.model.item.versionNo;

                        if (contractNo != null) {
                            window.location.href = "/Contratos/DetalhesContrato/" + contractNo;// + "?version=" + item.versionNo + "&" + "isHistoric=false";
                        }
                    }
                },

                _invoiceGenResponse: function (e) {
                    if (e.returnValue == true) {
                        this.$.ajax_getall.generateRequest();
                        this.$.avencaFixaTable.clearCache();

                    }
                    else {
                        this.openToastError("Ocorreu um erro ao tentar gerar faturas.");
                    }
                },
                _gridListPedingResponse: function (e) {
                    if (this.result == null || this.result == undefined || this.result.length == 0) {
                        this.openToastSuccess("Não existem linhas para faturar.");
                    }
                    else {
                        this.openToastSuccess("Tabela de faturas atualizada com sucesso.");
                        this.checked = false;
                    }
                },
                _count: function () {
                    if (this.selectedItems != null && this.selectedItems != "") {
                        if (this.result != null || this.result != undefined || this.result.length != 0) {
                            this.$.ajax_count.body = JSON.stringify(this.selectedItems);
                            this.$.ajax_count.generateRequest();
                            //this.$.avencaFixaTable.clearCache();
                        }
                        else {
                            this.openToastError("Não existem linhas disponíveis para contabilizar.");
                        }
                    }
                    else {
                        this.openToastError("As linhas não foram selecionadas.");
                    }
                },

                _invoiceCountResponse: function (e) {
                    if (this.invoiceCount == true) {
                        this.$.avencaFixaTable.clearCache();
                        this.openToastSuccess("Faturas contabilizadas com sucesso.");
                    }
                    else {
                        this.openToastError("Ocorreu um erro ao tentar contabilizar faturas.");
                    }
                },

                _parseRegionCode: function (param) {
                    if (param != undefined) {
                        var sel = this.CBRegions.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";
                },

                _parseFuncAreaCode: function (param) {
                    if (param != undefined) {
                        var sel = this.CBFunctionalAreas.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";

                },
                _parseinvoicePeriod: function (param) {
                    if (param != undefined) {
                        var sel = this.CBInvoicePeriods.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }

                },
                _parseRepCenterCode: function (param) {
                    if (param != undefined) {
                        var sel = this.CBResponsabilityCenterCodes.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }

                },
                _openPending: function (param) {
                    this.selectedItems = [];
                    this._NotshowColCheckBox = true;
                    this.$.ajax_getpeding.generateRequest();
                },
                _openInvice: function (param) {
                    this.selectedItems = [];
                    this._NotshowColCheckBox = false;
                    this.$.ajax_getall.generateRequest();
                },

                _exportEXCEL: function () {
                    //debugger;
                    this.result[0].ColunasEXCEL = this._columns;

                    this.$.ajax_Export.body = JSON.stringify(this.result);
                    this.$.ajax_Export.generateRequest();
                },

                _exportEXCELResponse: function (e) {
                    var FileName = this.export;
                    location.href = '../Contratos/ExportToExcelDownload_AvencaFixa?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "contractNo": { hidden: false, label: "Nº Contrato" },
                        "description": { hidden: false, label: "Descrição" },
                        "clientNo": { hidden: false, label: "Nº Cliente" },
                        "clientName": { hidden: false, label: "Nome Cliente" },
                        "invoiceValue": { hidden: false, label: "Valor da Fatura" },
                        "numberOfInvoices": { hidden: false, label: "Nº Faturas a Emitir" },
                        "invoiceTotal": { hidden: false, label: "Total a Faturar" },
                        "contractValue": { hidden: false, label: "Valor do Contrato" },
                        "valueToInvoice": { hidden: false, label: "Valor por Faturar" },
                        "billedValue": { hidden: false, label: "Valor Faturado" },
                        "regionCode": { hidden: false, label: "Cód. Região" },
                        "functionalAreaCode": { hidden: false, label: "Cód. Área Funcional" },
                        "responsabilityCenterCode": { hidden: false, label: "Cód. Centro Responsabilidade" },
                        "startDate": { hidden: false, label: "Data Inicial" },
                        "expiryDate": { hidden: false, label: "Data Expiração" },
                        "registerDate": { hidden: false, label: "Data Próxima Fatura" },
                        "invoicePeriod": { hidden: false, label: "Período Fatura" },
                        "invoiceGroupValue": { hidden: false, label: "Grupo Fatura" },
                        "invoiceGroupCount": { hidden: false, label: "Quantidade de Linhas Agrupadas" },
                        "document_No": { hidden: false, label: "Nº" }
                    };

                    if (localStorage["avencafixa.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(localStorage["avencafixa.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },
                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        localStorage["avencafixa.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },
                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },
                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
                /* end - ColumnToggle */
            });
        });
    </script>
</dom-module>

