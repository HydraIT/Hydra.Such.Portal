@{
    ViewData["Title"] = "Contactos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="import" href="~/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />
<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-contacts></x-contacts>
<dom-module id="x-contacts">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        <iron-ajax id="contacts_grid_datasource"
                   url="/Contactos/GetContacts"
                   last-response="{{Contacts}}"
                   auto
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax id="deleteContact_ajax"
                   url="/Contactos/DeleteContact"
                   last-response="{{DeleteContactResponse}}"
                   on-response="_deleteContactResponse"
                   method="post"
                   handle-as="json"
                   content-type="application/json">
        </iron-ajax>

        <iron-ajax url="/Contactos/ExportToExcel_Contactos"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <div class="subMenu">
            <template is="dom-if" if="{{ _permissions.create }}">
                <paper-button class="tablinks" on-tap="_redirectToNewContactForm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Novo</paper-button>
            </template>
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        <vaadin-grid id="grdContacts" aria-label="Contacts Table" items="[[Contacts]]" class="grid" active-item="{{activeItem}}" multi-sort="true" column-reordering-allowed>
            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.no.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="no">Nº</vaadin-grid-sorter>
                    <vaadin-grid-filter path="no" value="[[filter.no]]" />
                </template>
                <template>
                    {{item.no}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.noCliente.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="noCliente">Nº Cliente</vaadin-grid-sorter>
                    <vaadin-grid-filter path="noCliente" value="[[filter.noCliente]]" />
                </template>
                <template>
                    {{item.noCliente}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.clienteNome.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteNome">Cliente Nome</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteNome" value="[[filter.clienteNome]]" />
                </template>
                <template>
                    {{item.clienteNome}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.clienteNIF.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteNIF">Cliente NIF</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteNIF" value="[[filter.clienteNIF]]" />
                </template>
                <template>
                        {{item.clienteNIF}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.clienteEndereco.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteEndereco">Cliente Endereço</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteEndereco" value="[[filter.clienteEndereco]]" />
                </template>
                <template>
                    {{item.clienteEndereco}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="15%" hidden$="{{ _columns.clienteCodigoPostal.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteCodigoPostal">Cliente Código Postal</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteCodigoPostal" value="[[filter.clienteCodigoPostal]]" />
                </template>
                <template>
                    <div class="text-right">
                        {{item.clienteCodigoPostal}}
                    </div>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="15%" hidden$="{{ _columns.clienteCidade.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteCidade">Cliente Cidade</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteCidade" value="[[filter.clienteCidade]]" />
                </template>
                <template>
                    {{item.clienteCidade}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.clienteRegiao.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteRegiao">Cliente Cód. Região</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteRegiao" value="[[filter.clienteRegiao]]" />
                </template>
                <template>
                        {{item.clienteRegiao}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.clienteTelefone.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteTelefone">Cliente Telefone</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteTelefone" value="[[filter.clienteTelefone]]" />
                </template>
                <template>
                        {{item.clienteTelefone}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.clienteEmail.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="clienteEmail">Cliente Email</vaadin-grid-sorter>
                    <vaadin-grid-filter path="clienteEmail" value="[[filter.clienteEmail]]" />
                </template>
                <template>
                    {{item.clienteEmail}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.servicoNome.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="servicoNome">Serviço</vaadin-grid-sorter>
                    <vaadin-grid-filter path="servicoNome" value="[[filter.servicoNome]]" />
                </template>
                <template>
                    {{item.servicoNome}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.funcaoNome.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="funcaoNome">Função</vaadin-grid-sorter>
                    <vaadin-grid-filter path="funcaoNome" value="[[filter.funcaoNome]]" />
                </template>
                <template>
                    {{item.funcaoNome}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.nome.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="nome">Nome</vaadin-grid-sorter>
                    <vaadin-grid-filter path="nome" value="[[filter.nome]]" />
                </template>
                <template>
                    {{item.nome}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.telefone.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="telefone">Telefone</vaadin-grid-sorter>
                    <vaadin-grid-filter path="telefone" value="[[filter.telefone]]" />
                </template>
                <template>
                        {{item.telefone}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.telemovel.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="telemovel">Telemóvel</vaadin-grid-sorter>
                    <vaadin-grid-filter path="telemovel" value="[[filter.telemovel]]" />
                </template>
                <template>
                        {{item.telemovel}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="10%" hidden$="{{ _columns.fax.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="fax">Fax</vaadin-grid-sorter>
                    <vaadin-grid-filter path="fax" value="[[filter.fax]]" />
                </template>
                <template>
                        {{item.fax}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.email.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="email">Email</vaadin-grid-sorter>
                    <vaadin-grid-filter path="email" value="[[filter.email]]" />
                </template>
                <template>
                    {{item.email}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.pessoa.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="pessoa">Pessoa</vaadin-grid-sorter>
                    <vaadin-grid-filter path="pessoa" value="[[filter.pessoa]]" />
                </template>
                <template>
                    {{item.pessoa}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="20%" hidden$="{{ _columns.notas.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="notas">Notas</vaadin-grid-sorter>
                    <vaadin-grid-filter path="notas" value="[[filter.notas]]" />
                </template>
                <template>
                    {{item.notas}}
                </template>
            </vaadin-grid-column>

            <template is="dom-if" if="{{ _permissions.delete }}">
                <vaadin-grid-column width="5%">
                    <template class="header">
                    </template>
                    <template>
                        <center>
                            <paper-button id="btnCancel" class="btnRemove tableBtn" raised on-tap="_deleteContact" title="Eliminar"><i class="fa fa-trash" aria-hidden="true"></i></paper-button>
                        </center>
                    </template>
                </vaadin-grid-column>
            </template>
        </vaadin-grid>

        <paper-toast id="ToastMessageSuccess" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastMessageError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>
    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-contacts',
                properties: {
                    activeItem: {
                        observer: '_onContactRowSelected'
                    },
                    _filterActive: {
                        type: Boolean,
                        value: true
                    },
                    _permissions: {
                        type: Array,
                        value: @Html.Raw(Json.Serialize(ViewBag.UserPermissions)),
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                    /*FILTROS*/
                    filter: {
                        type: Object,
                        value: {},
                    },
                },

                ready: function () {
                    /*FILTROS*/
                    window.handleGridListColumnsOrder(this.$.grdContacts, 'contactos-index');
                    window.grid = this.$.grdContacts;
                    window._this = this;

                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');
                },

                fixGridToBottom: function () {
                    var grid_el = $(this.$.grdContacts);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },

                _openToast: function (message) {
                    this.$.ToastMessageSuccess.text = message;
                    this.$.ToastMessageSuccess.open();
                },
                _openToastError: function (message) {
                    this.$.ToastMessageError.text = message;
                    this.$.ToastMessageError.open();
                },

                _onContactRowSelected: function (item) {
                    if (item != null) {
                        /*FILTROS*/
                        var filters = {};
                        this.$.grdContacts._filters.map(function (value, index) {
                            filters[value.path] = value.value;
                        });
                        window.setGridFilter('contactos-index', filters || {});

                        window.location.href = "/Contactos/Detalhes/" + item.no;
                    }
                },
                /*FILTROS*/
                created: function () {
                    this.filter = window.getGridFilter('contactos-index');
                },

                _redirectToNewContactForm: function (item) {
                    if (item != null) {
                        window.location.href = "/Contactos/Detalhes/";
                    }
                },

                _deleteContact: function (e) {
                    var ajax_request = this.$.deleteContact_ajax;

                    var contactToDelete = e.model.item;

                    bootbox.confirm({
                        message: "Tem a certeza que pretende remover o contacto " + contactToDelete.no + "?",
                        buttons: {
                            confirm: {
                                label: 'Sim',
                                className: 'btn-success'
                            },
                            cancel: {
                                label: 'Não',
                                className: 'btn-danger'
                            }
                        },
                        callback: function (result) {
                            if (result) {
                                ajax_request.body = JSON.stringify(contactToDelete);
                                ajax_request.generateRequest();
                            }
                        }
                    });
                },
                _deleteContactResponse: function (e) {
                    if (this.DeleteContactResponse) {
                        this.$.contacts_grid_datasource.generateRequest();
                        this._openToast("Contacto eliminado com sucesso.");
                    }
                    else {
                        this._openToastError("Ocorreu um erro ao eliminar o contacto.");
                    }
                },

                _exportEXCEL: function () {
                    //debugger;
                    //this.Contacts[0].ColunasEXCEL = this._columns;
                    //this.$.ajax_Export.body = JSON.stringify(this.Contacts);

                    var result = this.$.grdContacts._filter(this.Contacts);
                    result[0].ColunasEXCEL = this._columns;

                    this.$.ajax_Export.body = JSON.stringify(result);
                    this.$.ajax_Export.generateRequest();
                },
                _exportEXCELResponse: function (e) {
                    //debugger
                    var FileName = this.export;
                    location.href = '../Contactos/ExportToExcelDownload_Contactos?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "no": { hidden: false, label: "Nº" },
                        "noCliente": { hidden: false, label: "Nº Cliente" },
                        "clienteNome": { hidden: false, label: "Cliente Nome" },
                        "clienteNIF": { hidden: false, label: "Cliente NIF" },
                        "clienteEndereco": { hidden: false, label: "Cliente Endereço" },
                        "clienteCodigoPostal": { hidden: false, label: "Cliente Código Postal" },
                        "clienteCidade": { hidden: false, label: "Cliente Cidade" },
                        "clienteRegiao": { hidden: false, label: "Cliente Região" },
                        "clienteTelefone": { hidden: false, label: "Cliente Telefone" },
                        "clienteEmail": { hidden: false, label: "Cliente Email" },
                        //"noServico": { hidden: false, label: "Nº Serviço" },
                        "servicoNome": { hidden: false, label: "Serviço" },
                        //"noFuncao": { hidden: false, label: "Nº Função" },
                        "funcaoNome": { hidden: false, label: "Função" },
                        "nome": { hidden: false, label: "Nome" },
                        "telefone": { hidden: false, label: "Telefone" },
                        "telemovel": { hidden: false, label: "Telemóvel" },
                        "fax": { hidden: false, label: "Fax" },
                        "email": { hidden: false, label: "Email" },
                        "pessoa": { hidden: false, label: "Pessoa" },
                        "notas": { hidden: false, label: "Notas" }
                    };

                    if (localStorage["contacts.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(localStorage["contacts.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },
                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        localStorage["contacts.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },
                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },
                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
                /* end - ColumnToggle */

            });
        });
    </script>
</dom-module>
