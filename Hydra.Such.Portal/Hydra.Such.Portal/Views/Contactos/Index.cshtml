
@{
    ViewData["Title"] = "Contactos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="import" href="~/lib/vaadin-themable-mixin/vaadin-themable-mixin.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sorter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-sort-behavior.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter.html" />
<link rel="import" href="~/lib/vaadin-grid/vaadin-grid-filter-behavior.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />
@*<link rel="import" href="~/lib/vaadin-valo-theme/vaadin-checkbox.html">
    <link rel="import" href="~/lib/vaadin-checkbox/vaadin-checkbox.html">*@
<link rel="import" href="~/lib/iron-form/iron-form.html" />
<link rel="import" href="~/lib/paper-button/paper-button.html" />

<!--start ColumnToggle-->
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-icons/iron-icons.html" />
<link rel="import" href="/lib/iron-behaviors/iron-button-state.html" />
<link rel="import" href="/lib/paper-menu-button/paper-menu-button.html" />
<!--end ColumnToggle-->

<x-contacts></x-contacts>
<dom-module id="x-contacts">
    <template>
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />

        <iron-ajax id="contacts_grid_datasource" url="/Contactos/GetContacts" last-response="{{Contacts}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax id="deleteContact_ajax" url="/Contactos/DeleteContact" last-response="{{DeleteContactResponse}}" on-response="_deleteContactResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>

        <iron-ajax url="/Contactos/ExportToExcel_Contactos"
                   last-response="{{export}}"
                   id="ajax_Export"
                   method="post"
                   handle-as="json"
                   on-response="_exportEXCELResponse"
                   content-type="application/json">
        </iron-ajax>

        <div class="subMenu">
            <template is="dom-if" if="{{ _permissions.create }}">
                <paper-button class="tablinks" on-tap="_redirectToNewContactForm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar Novo</paper-button>
            </template>
            <paper-button id="btnExport" class="tablinks" on-tap="_exportEXCEL" title="Exportar para Excel"><i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp; Exportar</paper-button>

            <!--start ColumnToggle-->
            <paper-menu-button class="column-toggle" no-animations id="gridOpcaoGeral">
                <paper-icon-button icon="view-column" slot="dropdown-trigger" alt="Colunas"></paper-icon-button>
                <div class="list-group" slot="dropdown-content">
                    <template is="dom-repeat" items="[[ _toArray(_columns)]]" id="columnsList">
                        <a href="javascript:void(0);" on-tap="_toggleColumn" data-item$="[[item]]" class$="list-group-item [[ _getColumnItemClass( item.key ) ]]">
                            {{ item.value.label }}
                        </a>
                        <hr />
                    </template>
                </div>
            </paper-menu-button>
            <!--end ColumnToggle-->
        </div>

        <vaadin-grid id="grdContacts" aria-label="Contacts Table" items="[[Contacts]]" class="grid" active-item="{{activeItem}}" multi-sort="true">
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.id.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="id">Nº</vaadin-grid-sorter>
                    <vaadin-grid-filter path="id" />
                </template>
                <template>
                    {{item.id}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.name.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="name">Nome</vaadin-grid-sorter>
                    <vaadin-grid-filter path="name" />
                </template>
                <template>
                    {{item.name}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.address.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="address">Endereço</vaadin-grid-sorter>
                    <vaadin-grid-filter path="address" />
                </template>
                <template>
                    {{item.address}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.zipCode.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="zipCode">Código Postal</vaadin-grid-sorter>
                    <vaadin-grid-filter path="zipCode" />
                </template>
                <template>
                    {{item.zipCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.city.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="city">Cidade</vaadin-grid-sorter>
                    <vaadin-grid-filter path="city" />
                </template>
                <template>
                    {{item.city}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.regiaoText.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="regiaoText">Região</vaadin-grid-sorter>
                    <vaadin-grid-filter path="regiaoText" />
                </template>
                <template>
                    {{item.regiaoText}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.phone.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="phone">Telefone</vaadin-grid-sorter>
                    <vaadin-grid-filter path="phone" />
                </template>
                <template>
                    {{item.phone}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.email.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="email">Email</vaadin-grid-sorter>
                    <vaadin-grid-filter path="email" />
                </template>
                <template>
                    {{item.email}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.vatNumber.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="vatNumber">NIF</vaadin-grid-sorter>
                    <vaadin-grid-filter path="vatNumber" />
                </template>
                <template>
                    {{item.vatNumber}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.personContact.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="personContact">Pessoa Contato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="personContact" />
                </template>
                <template>
                    {{item.personContact}}
                </template>
            </vaadin-grid-column>
            
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.phoneContact.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="phoneContact">Telefone Contato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="phoneContact" />
                </template>
                <template>
                    {{item.phoneContact}}
                </template>
            </vaadin-grid-column>
            
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.contactFunction.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="contactFunction">Função Contato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="contactFunction" />
                </template>
                <template>
                    {{item.contactFunction}}
                </template>
            </vaadin-grid-column>
            
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.mobilePhoneContact.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="mobilePhoneContact">Telemovel Contato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="mobilePhoneContact" />
                </template>
                <template>
                    {{item.mobilePhoneContact}}
                </template>
            </vaadin-grid-column>
            
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.emailContact.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="emailContact">Email Contato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="emailContact" />
                </template>
                <template>
                    {{item.emailContact}}
                </template>
            </vaadin-grid-column>
            
            <vaadin-grid-column resizable width="150px" hidden$="{{ _columns.notes.hidden }}">
                <template class="header">
                    <vaadin-grid-sorter path="notes">Notas</vaadin-grid-sorter>
                    <vaadin-grid-filter path="notes" />
                </template>
                <template>
                    {{item.notes}}
                </template>
            </vaadin-grid-column>

            <template is="dom-if" if="{{ _permissions.delete }}">
                <vaadin-grid-column width="10%">
                    <template class="header">
                    </template>
                    <template>
                        @*<paper-button raised id="btnCancel" class="btnRemove" on-tap="_deleteContact"><i class="fa fa-trash-o" aria-hidden="true"></i>&nbsp; Eliminar</paper-button>*@
                        <center>
                            <paper-button id="btnCancel" class="btnRemove tableBtn" raised on-tap="_deleteContact" title="Eliminar"><i class="fa fa-trash" aria-hidden="true"></i></paper-button>
                        </center>
                    </template>
                </vaadin-grid-column>
            </template>
        </vaadin-grid>
        <paper-toast id="ToastMessageSuccess" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastMessageError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>
    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-contacts',
                properties: {
                    activeItem: {
                        observer: '_onContactRowSelected'
                    },
                    _filterActive: {
                        type: Boolean,
                        value: true
                    },
                    _permissions: {
                        type: Array,
                        value: @Html.Raw(Json.Serialize(ViewBag.UserPermissions)),
                    },
                    _columns: {
                        type: Object,
                        value: function () {
                            return {};
                        }
                    },
                },
                ready: function () {
                    /*ColumnToggle*/
                    this._startColumnToggle();

                    var _this = this;
                    $(window).resize(function () {
                        _this.fixGridToBottom();
                    });
                    $(window).trigger('resize');
                },

                fixGridToBottom: function () {
                    var grid_el = $(this.$.grdContacts);
                    var parentHeight = $(this).offsetParent().height();
                    var offsetTop = $(this).offset().top;
                    var height = parentHeight - offsetTop;
                    grid_el.height(height);
                },

                _openToast: function (message) {
                    this.$.ToastMessageSuccess.text = message;
                    this.$.ToastMessageSuccess.open();
                },
                _openToastError: function (message) {
                    this.$.ToastMessageError.text = message;
                    this.$.ToastMessageError.open();
                },
                _onContactRowSelected: function (item) {
                    if (item != null) {
                        window.location.href = "/Contactos/Detalhes/" + item.id;
                    }
                },
                _redirectToNewContactForm: function (item) {
                    if (item != null) {
                        window.location.href = "/Contactos/Detalhes";
                    }
                },
                _deleteContact: function (e) {
                    var ajax_request = this.$.deleteContact_ajax;

                    var contactToDelete = e.model.item;//this.activeItem;

                    bootbox.confirm({
                        message: "Tem a certeza que pretende remover o contacto " + contactToDelete.id + "?",
                        buttons: {
                            confirm: {
                                label: 'Sim',
                                className: 'btn-success'
                            },
                            cancel: {
                                label: 'Não',
                                className: 'btn-danger'
                            }
                        },
                        callback: function (result) {
                            if (result) {
                                ajax_request.body = JSON.stringify(contactToDelete);
                                ajax_request.generateRequest();
                            }
                        }
                    });
                },
                _deleteContactResponse: function (e) {
                    if (this.DeleteContactResponse) {
                        this.$.contacts_grid_datasource.generateRequest();
                        this._openToast("Contacto eliminado com sucesso.");
                    }
                    else {
                        this._openToastError("Ocorreu um erro ao eliminar o contacto.");
                    }
                },

                _exportEXCEL: function () {
                    //debugger;
                    this.Contacts[0].ColunasEXCEL = this._columns;

                    this.$.ajax_Export.body = JSON.stringify(this.Contacts);
                    this.$.ajax_Export.generateRequest();
                },

                _exportEXCELResponse: function (e) {
                    //debugger
                    var FileName = this.export;
                    location.href = '../Contactos/ExportToExcelDownload_Contactos?sFileName=' + FileName;
                },

                /*start - ColumnToggle*/
                _startColumnToggle: function () {
                    var columns = {
                        "id": { hidden: false, label: "Nº" },
                        "name": { hidden: false, label: "Nome" },
                        "address": { hidden: false, label: "Endereço" },
                        "zipCode": { hidden: false, label: "Código Postal" },
                        "city": { hidden: false, label: "Cidade" },
                        "regiaoText": { hidden: false, label: "Região" },
                        "phone": { hidden: false, label: "Telefone" },
                        "email": { hidden: false, label: "Email" },
                        "vATNumber": { hidden: false, label: "NIF" },
                        "personContact": { hidden: false, label: "Pessoa Contato" },
                        "phoneContact": { hidden: false, label: "Telefone Contato" },
                        "contactFunction": { hidden: false, label: "Função Contato" },
                        "mobilePhoneContact": { hidden: false, label: "Telemovel Contato" },
                        "emailContact": { hidden: false, label: "Email Contato" },
                        "notes": { hidden: false, label: "Notas" }
                    };

                    if (sessionStorage["contacts.ToggleColumn"]) {
                        var keys = Object.keys(columns);
                        var storedColumns = JSON.parse(sessionStorage["contacts.ToggleColumn"]);
                        for (var i = 0; i < keys.length; i++) {
                            columns[keys[i]] = storedColumns[keys[i]];
                        }
                    };
                    this._columns = columns;
                },
                _toggleColumn: function (event) {
                    var columnIndex = JSON.parse(event.target.dataset.item).key;
                    event.path[0].classList.toggle("selected");
                    this.set('_columns.' + columnIndex + '.hidden', (!this._columns[columnIndex].hidden));
                    if (typeof (Storage) !== "undefined") {
                        sessionStorage["contacts.ToggleColumn"] = JSON.stringify(this._columns);
                    }
                },
                _getColumnItemClass: function (columnIndex) {
                    return !this._columns[columnIndex].hidden ? "selected" : "";
                },
                _toArray: function (obj) {
                    return Object.keys(obj).map(function (key) {
                        return {
                            key: key,
                            value: obj[key]
                        };
                    });
                },
                /* end - ColumnToggle */

            });
        });
    </script>
</dom-module>
