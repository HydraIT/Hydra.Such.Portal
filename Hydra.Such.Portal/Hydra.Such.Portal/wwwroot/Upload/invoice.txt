string num_cliente = "";
            string PKey = "";
            int lineNo = 1;
            List<InvoiceMessages> ClientsError = new List<InvoiceMessages>();
            try
            {
                if (data != null)
                {
                    List<ProjectDiaryViewModel> NewList = new List<ProjectDiaryViewModel>();

                    foreach (var lines in data)
                    {
                        if (num_cliente != lines.InvoiceToClientNo)
                        {
                            if (NewList.Count() > 0)
                            {
                                //update to Invoiced = true
                                foreach (var lst in NewList)
                                {
                                    MovimentosDeProjeto upDate = DBProjectMovements.GetByLineNo(lst.LineNo, User.Identity.Name).FirstOrDefault();
                                    upDate.Faturada = true;
                                    DBProjectMovements.Update(upDate);
                                }
                                InvoiceMessages Messages = new InvoiceMessages();
                                Messages.ClientNo = lines.InvoiceToClientNo;
                                Messages.Iserror = false;

                                ClientsError.Add(Messages);
                                NewList.Clear();
                            }

                            try
                            {
                                PKey = "";
                                Task<WSCreatePreInvoice.Create_Result> TCreatePreInvoice = WSPreInvoice.CreatePreInvoice(lines, _configws);
                                TCreatePreInvoice.Wait();
                                if (TCreatePreInvoice.IsCompletedSuccessfully)
                                {
                                    num_cliente = lines.InvoiceToClientNo;
                                    PKey = TCreatePreInvoice.Result.WSPreInvoice.No;
                                }
                                else
                                {
                                    num_cliente = lines.InvoiceToClientNo;
                                    PKey = "";
                                }
                            }
                            catch (Exception ex)
                            {
                                PKey = "";
                                num_cliente = lines.InvoiceToClientNo;
                                throw;
                            }
                        }

                        if (!String.IsNullOrEmpty(PKey) && PKey != "error")
                        {
                            try
                            {
                                Task<WSCreatePreInvoiceLine.Create_Result> TCreatePreInvoiceLine = WSPreInvoiceLine.CreatePreInvoiceLine(lines, _configws, PKey);
                                TCreatePreInvoiceLine.Wait();

                                if (TCreatePreInvoiceLine.IsCompletedSuccessfully && !String.IsNullOrEmpty(TCreatePreInvoiceLine.Result.WsPreInvoiceLine.Key))
                                {
                                    num_cliente = lines.InvoiceToClientNo;
                                    NewList.Add(lines);
                                    if (data.Count() == lineNo)
                                    {
                                        //update to Invoiced = true
                                        foreach (var lst in NewList)
                                        {
                                            MovimentosDeProjeto upDate = DBProjectMovements.GetByLineNo(lst.LineNo, User.Identity.Name).FirstOrDefault();
                                            upDate.Faturada = true;
                                            DBProjectMovements.Update(upDate);

                                            InvoiceMessages Messages = new InvoiceMessages();
                                            Messages.ClientNo = num_cliente;
                                            Messages.Iserror = false;

                                            ClientsError.Add(Messages);
                                        }
                                    }
                                }
                                else
                                {
                                    Task<WSCreatePreInvoice.Delete_Result> DeleteHeader = WSPreInvoice.DeletePreInvoiceLineList(PKey, _configws);
                                    num_cliente = lines.InvoiceToClientNo;
                                    PKey = "error";

                                    InvoiceMessages Messages = new InvoiceMessages();
                                    Messages.ClientNo = lines.InvoiceToClientNo;
                                    Messages.Iserror = true;

                                    ClientsError.Add(Messages);
                                }
                            }
                            catch (Exception ex)
                            {
                                Task<WSCreatePreInvoice.Delete_Result> DeleteHeader = WSPreInvoice.DeletePreInvoiceLineList(PKey, _configws);
                                PKey = "error";

                                InvoiceMessages Messages = new InvoiceMessages();
                                Messages.ClientNo = lines.InvoiceToClientNo;
                                Messages.Iserror = true;

                                ClientsError.Add(Messages);
                            }
                        }
                        else
                        {
                            num_cliente = lines.InvoiceToClientNo;
                        }
                        lineNo += 1;
                    }
                }
            }
            catch (Exception ex)
            {
                ProjectDiaryViewModel dataerror = new ProjectDiaryViewModel();
                dataerror.eReasonCode = 4;
                dataerror.eMessage = "Ocorreu um erro ao criar Pré Fatura";
                return Json(dataerror);
            }
            //ProjectDiaryViewModel message = new ProjectDiaryViewModel();
            //message.eReasonCode = 1;
            //message.eMessage = "Linhas de Fatura criadas com sucesso";
            data.Clear();
            return Json(ClientsError);